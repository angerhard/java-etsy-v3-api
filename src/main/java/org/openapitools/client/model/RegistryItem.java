/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * An item within an Etsy Registry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-02T22:46:35.595209100+02:00[Europe/Berlin]")
public class RegistryItem {
  public static final String SERIALIZED_NAME_REQUESTED_COUNT = "requested_count";
  @SerializedName(SERIALIZED_NAME_REQUESTED_COUNT)
  private Long requestedCount;

  public static final String SERIALIZED_NAME_PURCHASED_COUNT = "purchased_count";
  @SerializedName(SERIALIZED_NAME_PURCHASED_COUNT)
  private Long purchasedCount;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Long price;

  public static final String SERIALIZED_NAME_SALES_PRICE = "sales_price";
  @SerializedName(SERIALIZED_NAME_SALES_PRICE)
  private Long salesPrice;

  public static final String SERIALIZED_NAME_LISTING_ID = "listing_id";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private String listingId;

  public static final String SERIALIZED_NAME_LISTING_CUSTOMIZATION_ID = "listing_customization_id";
  @SerializedName(SERIALIZED_NAME_LISTING_CUSTOMIZATION_ID)
  private String listingCustomizationId;

  public static final String SERIALIZED_NAME_SHOP_NAME = "shop_name";
  @SerializedName(SERIALIZED_NAME_SHOP_NAME)
  private String shopName;

  public static final String SERIALIZED_NAME_SHOP_ID = "shop_id";
  @SerializedName(SERIALIZED_NAME_SHOP_ID)
  private Long shopId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Long categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_TITLE = "category_title";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TITLE)
  private String categoryTitle;

  public static final String SERIALIZED_NAME_IS_UNAVAILABLE = "is_unavailable";
  @SerializedName(SERIALIZED_NAME_IS_UNAVAILABLE)
  private Boolean isUnavailable;

  public static final String SERIALIZED_NAME_LISTING_URL = "listing_url";
  @SerializedName(SERIALIZED_NAME_LISTING_URL)
  private String listingUrl;

  public static final String SERIALIZED_NAME_REGISTRY_ITEM_URL = "registry_item_url";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ITEM_URL)
  private String registryItemUrl;

  public RegistryItem() {
  }

  public RegistryItem requestedCount(Long requestedCount) {
    
    this.requestedCount = requestedCount;
    return this;
  }

   /**
   * Quantity requested for the registry item
   * minimum: 0
   * @return requestedCount
  **/
  @javax.annotation.Nullable

  public Long getRequestedCount() {
    return requestedCount;
  }


  public void setRequestedCount(Long requestedCount) {
    this.requestedCount = requestedCount;
  }


  public RegistryItem purchasedCount(Long purchasedCount) {
    
    this.purchasedCount = purchasedCount;
    return this;
  }

   /**
   * Quantity purchased for the registry item
   * minimum: 0
   * @return purchasedCount
  **/
  @javax.annotation.Nullable

  public Long getPurchasedCount() {
    return purchasedCount;
  }


  public void setPurchasedCount(Long purchasedCount) {
    this.purchasedCount = purchasedCount;
  }


  public RegistryItem title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Listing title
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public RegistryItem imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * URL of the main product listing
   * @return imageUrl
  **/
  @javax.annotation.Nullable

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public RegistryItem price(Long price) {
    
    this.price = price;
    return this;
  }

   /**
   * Listing price in cents; 0 if sold out / unvailable
   * minimum: 0
   * @return price
  **/
  @javax.annotation.Nullable

  public Long getPrice() {
    return price;
  }


  public void setPrice(Long price) {
    this.price = price;
  }


  public RegistryItem salesPrice(Long salesPrice) {
    
    this.salesPrice = salesPrice;
    return this;
  }

   /**
   * Listing price if on sale, otherwise null
   * minimum: 0
   * @return salesPrice
  **/
  @javax.annotation.Nullable

  public Long getSalesPrice() {
    return salesPrice;
  }


  public void setSalesPrice(Long salesPrice) {
    this.salesPrice = salesPrice;
  }


  public RegistryItem listingId(String listingId) {
    
    this.listingId = listingId;
    return this;
  }

   /**
   * Listing ID
   * @return listingId
  **/
  @javax.annotation.Nullable

  public String getListingId() {
    return listingId;
  }


  public void setListingId(String listingId) {
    this.listingId = listingId;
  }


  public RegistryItem listingCustomizationId(String listingCustomizationId) {
    
    this.listingCustomizationId = listingCustomizationId;
    return this;
  }

   /**
   * Listing customization id
   * @return listingCustomizationId
  **/
  @javax.annotation.Nullable

  public String getListingCustomizationId() {
    return listingCustomizationId;
  }


  public void setListingCustomizationId(String listingCustomizationId) {
    this.listingCustomizationId = listingCustomizationId;
  }


  public RegistryItem shopName(String shopName) {
    
    this.shopName = shopName;
    return this;
  }

   /**
   * Name of the listing&#39;s shop
   * @return shopName
  **/
  @javax.annotation.Nullable

  public String getShopName() {
    return shopName;
  }


  public void setShopName(String shopName) {
    this.shopName = shopName;
  }


  public RegistryItem shopId(Long shopId) {
    
    this.shopId = shopId;
    return this;
  }

   /**
   * ID of the listing&#39;s shop
   * minimum: 1
   * @return shopId
  **/
  @javax.annotation.Nullable

  public Long getShopId() {
    return shopId;
  }


  public void setShopId(Long shopId) {
    this.shopId = shopId;
  }


  public RegistryItem categoryId(Long categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * ID of listing category
   * minimum: 0
   * @return categoryId
  **/
  @javax.annotation.Nullable

  public Long getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(Long categoryId) {
    this.categoryId = categoryId;
  }


  public RegistryItem categoryTitle(String categoryTitle) {
    
    this.categoryTitle = categoryTitle;
    return this;
  }

   /**
   * Title of listing category
   * @return categoryTitle
  **/
  @javax.annotation.Nullable

  public String getCategoryTitle() {
    return categoryTitle;
  }


  public void setCategoryTitle(String categoryTitle) {
    this.categoryTitle = categoryTitle;
  }


  public RegistryItem isUnavailable(Boolean isUnavailable) {
    
    this.isUnavailable = isUnavailable;
    return this;
  }

   /**
   * Registry item is unavailable for purchasing
   * @return isUnavailable
  **/
  @javax.annotation.Nullable

  public Boolean getIsUnavailable() {
    return isUnavailable;
  }


  public void setIsUnavailable(Boolean isUnavailable) {
    this.isUnavailable = isUnavailable;
  }


  public RegistryItem listingUrl(String listingUrl) {
    
    this.listingUrl = listingUrl;
    return this;
  }

   /**
   * Listing URL
   * @return listingUrl
  **/
  @javax.annotation.Nullable

  public String getListingUrl() {
    return listingUrl;
  }


  public void setListingUrl(String listingUrl) {
    this.listingUrl = listingUrl;
  }


  public RegistryItem registryItemUrl(String registryItemUrl) {
    
    this.registryItemUrl = registryItemUrl;
    return this;
  }

   /**
   * Link to the registry item within the registry
   * @return registryItemUrl
  **/
  @javax.annotation.Nullable

  public String getRegistryItemUrl() {
    return registryItemUrl;
  }


  public void setRegistryItemUrl(String registryItemUrl) {
    this.registryItemUrl = registryItemUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryItem registryItem = (RegistryItem) o;
    return Objects.equals(this.requestedCount, registryItem.requestedCount) &&
        Objects.equals(this.purchasedCount, registryItem.purchasedCount) &&
        Objects.equals(this.title, registryItem.title) &&
        Objects.equals(this.imageUrl, registryItem.imageUrl) &&
        Objects.equals(this.price, registryItem.price) &&
        Objects.equals(this.salesPrice, registryItem.salesPrice) &&
        Objects.equals(this.listingId, registryItem.listingId) &&
        Objects.equals(this.listingCustomizationId, registryItem.listingCustomizationId) &&
        Objects.equals(this.shopName, registryItem.shopName) &&
        Objects.equals(this.shopId, registryItem.shopId) &&
        Objects.equals(this.categoryId, registryItem.categoryId) &&
        Objects.equals(this.categoryTitle, registryItem.categoryTitle) &&
        Objects.equals(this.isUnavailable, registryItem.isUnavailable) &&
        Objects.equals(this.listingUrl, registryItem.listingUrl) &&
        Objects.equals(this.registryItemUrl, registryItem.registryItemUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedCount, purchasedCount, title, imageUrl, price, salesPrice, listingId, listingCustomizationId, shopName, shopId, categoryId, categoryTitle, isUnavailable, listingUrl, registryItemUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryItem {\n");
    sb.append("    requestedCount: ").append(toIndentedString(requestedCount)).append("\n");
    sb.append("    purchasedCount: ").append(toIndentedString(purchasedCount)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    salesPrice: ").append(toIndentedString(salesPrice)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    listingCustomizationId: ").append(toIndentedString(listingCustomizationId)).append("\n");
    sb.append("    shopName: ").append(toIndentedString(shopName)).append("\n");
    sb.append("    shopId: ").append(toIndentedString(shopId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryTitle: ").append(toIndentedString(categoryTitle)).append("\n");
    sb.append("    isUnavailable: ").append(toIndentedString(isUnavailable)).append("\n");
    sb.append("    listingUrl: ").append(toIndentedString(listingUrl)).append("\n");
    sb.append("    registryItemUrl: ").append(toIndentedString(registryItemUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requested_count");
    openapiFields.add("purchased_count");
    openapiFields.add("title");
    openapiFields.add("image_url");
    openapiFields.add("price");
    openapiFields.add("sales_price");
    openapiFields.add("listing_id");
    openapiFields.add("listing_customization_id");
    openapiFields.add("shop_name");
    openapiFields.add("shop_id");
    openapiFields.add("category_id");
    openapiFields.add("category_title");
    openapiFields.add("is_unavailable");
    openapiFields.add("listing_url");
    openapiFields.add("registry_item_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegistryItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RegistryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryItem is not found in the empty JSON string", RegistryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegistryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistryItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("listing_id") != null && !jsonObj.get("listing_id").isJsonNull()) && !jsonObj.get("listing_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_id").toString()));
      }
      if ((jsonObj.get("listing_customization_id") != null && !jsonObj.get("listing_customization_id").isJsonNull()) && !jsonObj.get("listing_customization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_customization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_customization_id").toString()));
      }
      if ((jsonObj.get("shop_name") != null && !jsonObj.get("shop_name").isJsonNull()) && !jsonObj.get("shop_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shop_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shop_name").toString()));
      }
      if ((jsonObj.get("category_title") != null && !jsonObj.get("category_title").isJsonNull()) && !jsonObj.get("category_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_title").toString()));
      }
      if ((jsonObj.get("listing_url") != null && !jsonObj.get("listing_url").isJsonNull()) && !jsonObj.get("listing_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_url").toString()));
      }
      if ((jsonObj.get("registry_item_url") != null && !jsonObj.get("registry_item_url").isJsonNull()) && !jsonObj.get("registry_item_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry_item_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry_item_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistryItem>() {
           @Override
           public void write(JsonWriter out, RegistryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistryItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegistryItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegistryItem
  * @throws IOException if the JSON string is invalid with respect to RegistryItem
  */
  public static RegistryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistryItem.class);
  }

 /**
  * Convert an instance of RegistryItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

