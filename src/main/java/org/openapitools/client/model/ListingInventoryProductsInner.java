/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.client.JSON;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

/**
 * A JSON array of products available in a listing, even if only one product. All field names in the JSON blobs are lowercase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-30T11:53:28.314915500+01:00[Europe/Berlin]")
public class ListingInventoryProductsInner {
  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Long productId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_IS_DELETED = "is_deleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_OFFERINGS = "offerings";
  @SerializedName(SERIALIZED_NAME_OFFERINGS)
  private List<ListingInventoryProductOfferingsInner> offerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY_VALUES = "property_values";
  @SerializedName(SERIALIZED_NAME_PROPERTY_VALUES)
  private List<ListingInventoryProductPropertyValuesInner> propertyValues = new ArrayList<>();

  public ListingInventoryProductsInner() {
  }

  public ListingInventoryProductsInner productId(Long productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
   * minimum: 1
   * @return productId
  **/
  @javax.annotation.Nullable

  public Long getProductId() {
    return productId;
  }


  public void setProductId(Long productId) {
    this.productId = productId;
  }


  public ListingInventoryProductsInner sku(String sku) {
    
    this.sku = sku;
    return this;
  }

   /**
   * The SKU string for the product
   * @return sku
  **/
  @javax.annotation.Nullable

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    this.sku = sku;
  }


  public ListingInventoryProductsInner isDeleted(Boolean isDeleted) {
    
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * When true, someone deleted this product.
   * @return isDeleted
  **/
  @javax.annotation.Nullable

  public Boolean getIsDeleted() {
    return isDeleted;
  }


  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public ListingInventoryProductsInner offerings(List<ListingInventoryProductOfferingsInner> offerings) {
    
    this.offerings = offerings;
    return this;
  }

  public ListingInventoryProductsInner addOfferingsItem(ListingInventoryProductOfferingsInner offeringsItem) {
    if (this.offerings == null) {
      this.offerings = new ArrayList<>();
    }
    this.offerings.add(offeringsItem);
    return this;
  }

   /**
   * A list of product offering entries for this product.
   * @return offerings
  **/
  @javax.annotation.Nullable

  public List<ListingInventoryProductOfferingsInner> getOfferings() {
    return offerings;
  }


  public void setOfferings(List<ListingInventoryProductOfferingsInner> offerings) {
    this.offerings = offerings;
  }


  public ListingInventoryProductsInner propertyValues(List<ListingInventoryProductPropertyValuesInner> propertyValues) {
    
    this.propertyValues = propertyValues;
    return this;
  }

  public ListingInventoryProductsInner addPropertyValuesItem(ListingInventoryProductPropertyValuesInner propertyValuesItem) {
    if (this.propertyValues == null) {
      this.propertyValues = new ArrayList<>();
    }
    this.propertyValues.add(propertyValuesItem);
    return this;
  }

   /**
   * A list of property value entries for this product. Note: parenthesis characters (&#x60;(&#x60; and &#x60;)&#x60;) are not allowed.
   * @return propertyValues
  **/
  @javax.annotation.Nullable

  public List<ListingInventoryProductPropertyValuesInner> getPropertyValues() {
    return propertyValues;
  }


  public void setPropertyValues(List<ListingInventoryProductPropertyValuesInner> propertyValues) {
    this.propertyValues = propertyValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingInventoryProductsInner listingInventoryProductsInner = (ListingInventoryProductsInner) o;
    return Objects.equals(this.productId, listingInventoryProductsInner.productId) &&
        Objects.equals(this.sku, listingInventoryProductsInner.sku) &&
        Objects.equals(this.isDeleted, listingInventoryProductsInner.isDeleted) &&
        Objects.equals(this.offerings, listingInventoryProductsInner.offerings) &&
        Objects.equals(this.propertyValues, listingInventoryProductsInner.propertyValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productId, sku, isDeleted, offerings, propertyValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingInventoryProductsInner {\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    offerings: ").append(toIndentedString(offerings)).append("\n");
    sb.append("    propertyValues: ").append(toIndentedString(propertyValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product_id");
    openapiFields.add("sku");
    openapiFields.add("is_deleted");
    openapiFields.add("offerings");
    openapiFields.add("property_values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListingInventoryProductsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListingInventoryProductsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingInventoryProductsInner is not found in the empty JSON string", ListingInventoryProductsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListingInventoryProductsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingInventoryProductsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (jsonObj.get("offerings") != null && !jsonObj.get("offerings").isJsonNull()) {
        JsonArray jsonArrayofferings = jsonObj.getAsJsonArray("offerings");
        if (jsonArrayofferings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerings` to be an array in the JSON string but got `%s`", jsonObj.get("offerings").toString()));
          }

          // validate the optional field `offerings` (array)
          for (int i = 0; i < jsonArrayofferings.size(); i++) {
            ListingInventoryProductOfferingsInner.validateJsonObject(jsonArrayofferings.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("property_values") != null && !jsonObj.get("property_values").isJsonNull()) {
        JsonArray jsonArraypropertyValues = jsonObj.getAsJsonArray("property_values");
        if (jsonArraypropertyValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("property_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `property_values` to be an array in the JSON string but got `%s`", jsonObj.get("property_values").toString()));
          }

          // validate the optional field `property_values` (array)
          for (int i = 0; i < jsonArraypropertyValues.size(); i++) {
            ListingInventoryProductPropertyValuesInner.validateJsonObject(jsonArraypropertyValues.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingInventoryProductsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingInventoryProductsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingInventoryProductsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingInventoryProductsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingInventoryProductsInner>() {
           @Override
           public void write(JsonWriter out, ListingInventoryProductsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingInventoryProductsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListingInventoryProductsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListingInventoryProductsInner
  * @throws IOException if the JSON string is invalid with respect to ListingInventoryProductsInner
  */
  public static ListingInventoryProductsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingInventoryProductsInner.class);
  }

 /**
  * Convert an instance of ListingInventoryProductsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

