/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a shop&#39;s holiday preference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-15T11:53:41.521727200+01:00[Europe/Berlin]")
public class ShopHolidayPreference {
  public static final String SERIALIZED_NAME_SHOP_ID = "shop_id";
  @SerializedName(SERIALIZED_NAME_SHOP_ID)
  private Long shopId;

  /**
   * The unique id that maps to the holiday a country observes. See the [Fulfillment Tutorial docs](https://developer.etsy.com/documentation/tutorials/fulfillment/#country-holidays) for more info
   */
  @JsonAdapter(HolidayIdEnum.Adapter.class)
  public enum HolidayIdEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    _13("13"),
    
    _14("14"),
    
    _15("15"),
    
    _16("16"),
    
    _17("17"),
    
    _18("18"),
    
    _19("19"),
    
    _20("20"),
    
    _21("21"),
    
    _22("22"),
    
    _23("23"),
    
    _24("24"),
    
    _25("25"),
    
    _26("26"),
    
    _27("27"),
    
    _28("28"),
    
    _29("29"),
    
    _30("30"),
    
    _31("31"),
    
    _32("32"),
    
    _33("33"),
    
    _34("34"),
    
    _35("35"),
    
    _36("36"),
    
    _37("37"),
    
    _38("38"),
    
    _39("39"),
    
    _40("40"),
    
    _41("41"),
    
    _42("42"),
    
    _43("43"),
    
    _44("44"),
    
    _45("45"),
    
    _46("46"),
    
    _47("47"),
    
    _48("48"),
    
    _49("49"),
    
    _50("50"),
    
    _51("51"),
    
    _52("52"),
    
    _53("53"),
    
    _54("54"),
    
    _55("55"),
    
    _56("56"),
    
    _57("57"),
    
    _58("58"),
    
    _59("59"),
    
    _60("60"),
    
    _61("61"),
    
    _62("62"),
    
    _63("63"),
    
    _64("64"),
    
    _65("65"),
    
    _66("66"),
    
    _67("67"),
    
    _68("68"),
    
    _69("69"),
    
    _70("70"),
    
    _71("71"),
    
    _72("72"),
    
    _73("73"),
    
    _74("74"),
    
    _75("75"),
    
    _76("76"),
    
    _77("77"),
    
    _78("78"),
    
    _79("79"),
    
    _80("80"),
    
    _81("81"),
    
    _82("82"),
    
    _83("83"),
    
    _84("84"),
    
    _85("85"),
    
    _86("86"),
    
    _87("87"),
    
    _88("88"),
    
    _89("89"),
    
    _90("90"),
    
    _91("91"),
    
    _92("92"),
    
    _93("93"),
    
    _94("94"),
    
    _95("95"),
    
    _96("96"),
    
    _97("97"),
    
    _98("98"),
    
    _99("99"),
    
    _100("100"),
    
    _101("101"),
    
    _102("102"),
    
    _103("103"),
    
    _104("104"),
    
    _105("105");

    private String value;

    HolidayIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HolidayIdEnum fromValue(String value) {
      for (HolidayIdEnum b : HolidayIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HolidayIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HolidayIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HolidayIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HolidayIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOLIDAY_ID = "holiday_id";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_ID)
  private HolidayIdEnum holidayId;

  public static final String SERIALIZED_NAME_COUNTRY_ISO = "country_iso";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO)
  private String countryIso;

  public static final String SERIALIZED_NAME_IS_WORKING = "is_working";
  @SerializedName(SERIALIZED_NAME_IS_WORKING)
  private Boolean isWorking;

  public static final String SERIALIZED_NAME_HOLIDAY_NAME = "holiday_name";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_NAME)
  private String holidayName;

  public ShopHolidayPreference() {
  }

  public ShopHolidayPreference shopId(Long shopId) {
    
    this.shopId = shopId;
    return this;
  }

   /**
   * The unique positive non-zero numeric ID for an Etsy Shop.
   * minimum: 1
   * @return shopId
  **/
  @javax.annotation.Nullable

  public Long getShopId() {
    return shopId;
  }


  public void setShopId(Long shopId) {
    this.shopId = shopId;
  }


  public ShopHolidayPreference holidayId(HolidayIdEnum holidayId) {
    
    this.holidayId = holidayId;
    return this;
  }

   /**
   * The unique id that maps to the holiday a country observes. See the [Fulfillment Tutorial docs](https://developer.etsy.com/documentation/tutorials/fulfillment/#country-holidays) for more info
   * @return holidayId
  **/
  @javax.annotation.Nullable

  public HolidayIdEnum getHolidayId() {
    return holidayId;
  }


  public void setHolidayId(HolidayIdEnum holidayId) {
    this.holidayId = holidayId;
  }


  public ShopHolidayPreference countryIso(String countryIso) {
    
    this.countryIso = countryIso;
    return this;
  }

   /**
   * The country iso where the shop is located.
   * @return countryIso
  **/
  @javax.annotation.Nullable

  public String getCountryIso() {
    return countryIso;
  }


  public void setCountryIso(String countryIso) {
    this.countryIso = countryIso;
  }


  public ShopHolidayPreference isWorking(Boolean isWorking) {
    
    this.isWorking = isWorking;
    return this;
  }

   /**
   * A boolean value for whether the shop will process orders on a particular holiday.
   * @return isWorking
  **/
  @javax.annotation.Nullable

  public Boolean getIsWorking() {
    return isWorking;
  }


  public void setIsWorking(Boolean isWorking) {
    this.isWorking = isWorking;
  }


  public ShopHolidayPreference holidayName(String holidayName) {
    
    this.holidayName = holidayName;
    return this;
  }

   /**
   * The name of the holiday that a country observes.
   * @return holidayName
  **/
  @javax.annotation.Nullable

  public String getHolidayName() {
    return holidayName;
  }


  public void setHolidayName(String holidayName) {
    this.holidayName = holidayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopHolidayPreference shopHolidayPreference = (ShopHolidayPreference) o;
    return Objects.equals(this.shopId, shopHolidayPreference.shopId) &&
        Objects.equals(this.holidayId, shopHolidayPreference.holidayId) &&
        Objects.equals(this.countryIso, shopHolidayPreference.countryIso) &&
        Objects.equals(this.isWorking, shopHolidayPreference.isWorking) &&
        Objects.equals(this.holidayName, shopHolidayPreference.holidayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shopId, holidayId, countryIso, isWorking, holidayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopHolidayPreference {\n");
    sb.append("    shopId: ").append(toIndentedString(shopId)).append("\n");
    sb.append("    holidayId: ").append(toIndentedString(holidayId)).append("\n");
    sb.append("    countryIso: ").append(toIndentedString(countryIso)).append("\n");
    sb.append("    isWorking: ").append(toIndentedString(isWorking)).append("\n");
    sb.append("    holidayName: ").append(toIndentedString(holidayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shop_id");
    openapiFields.add("holiday_id");
    openapiFields.add("country_iso");
    openapiFields.add("is_working");
    openapiFields.add("holiday_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShopHolidayPreference
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShopHolidayPreference.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShopHolidayPreference is not found in the empty JSON string", ShopHolidayPreference.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShopHolidayPreference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShopHolidayPreference` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("holiday_id") != null && !jsonObj.get("holiday_id").isJsonNull()) && !jsonObj.get("holiday_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holiday_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holiday_id").toString()));
      }
      if ((jsonObj.get("country_iso") != null && !jsonObj.get("country_iso").isJsonNull()) && !jsonObj.get("country_iso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_iso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_iso").toString()));
      }
      if ((jsonObj.get("holiday_name") != null && !jsonObj.get("holiday_name").isJsonNull()) && !jsonObj.get("holiday_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holiday_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holiday_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShopHolidayPreference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShopHolidayPreference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShopHolidayPreference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShopHolidayPreference.class));

       return (TypeAdapter<T>) new TypeAdapter<ShopHolidayPreference>() {
           @Override
           public void write(JsonWriter out, ShopHolidayPreference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShopHolidayPreference read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShopHolidayPreference given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShopHolidayPreference
  * @throws IOException if the JSON string is invalid with respect to ShopHolidayPreference
  */
  public static ShopHolidayPreference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShopHolidayPreference.class);
  }

 /**
  * Convert an instance of ShopHolidayPreference to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

