/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

/**
 * List of Shop Receipt resources found, with all Shop Receipt fields for each resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-18T13:10:02.644710400+01:00[Europe/Berlin]")
public class ShopReceiptsResultsInner {
  public static final String SERIALIZED_NAME_RECEIPT_ID = "receipt_id";
  @SerializedName(SERIALIZED_NAME_RECEIPT_ID)
  private Long receiptId;

  public static final String SERIALIZED_NAME_RECEIPT_TYPE = "receipt_type";
  @SerializedName(SERIALIZED_NAME_RECEIPT_TYPE)
  private Long receiptType;

  public static final String SERIALIZED_NAME_SELLER_USER_ID = "seller_user_id";
  @SerializedName(SERIALIZED_NAME_SELLER_USER_ID)
  private Long sellerUserId;

  public static final String SERIALIZED_NAME_SELLER_EMAIL = "seller_email";
  @SerializedName(SERIALIZED_NAME_SELLER_EMAIL)
  private String sellerEmail;

  public static final String SERIALIZED_NAME_BUYER_USER_ID = "buyer_user_id";
  @SerializedName(SERIALIZED_NAME_BUYER_USER_ID)
  private Long buyerUserId;

  public static final String SERIALIZED_NAME_BUYER_EMAIL = "buyer_email";
  @SerializedName(SERIALIZED_NAME_BUYER_EMAIL)
  private String buyerEmail;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FIRST_LINE = "first_line";
  @SerializedName(SERIALIZED_NAME_FIRST_LINE)
  private String firstLine;

  public static final String SERIALIZED_NAME_SECOND_LINE = "second_line";
  @SerializedName(SERIALIZED_NAME_SECOND_LINE)
  private String secondLine;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  /**
   * The current order status string. One of: &#x60;paid&#x60;, &#x60;completed&#x60;, &#x60;open&#x60;, &#x60;payment processing&#x60; or &#x60;canceled&#x60;.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PAID("paid"),
    
    COMPLETED("completed"),
    
    OPEN("open"),
    
    PAYMENT_PROCESSING("payment processing"),
    
    CANCELED("canceled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formatted_address";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_COUNTRY_ISO = "country_iso";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO)
  private String countryIso;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_EMAIL = "payment_email";
  @SerializedName(SERIALIZED_NAME_PAYMENT_EMAIL)
  private String paymentEmail;

  public static final String SERIALIZED_NAME_MESSAGE_FROM_SELLER = "message_from_seller";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FROM_SELLER)
  private String messageFromSeller;

  public static final String SERIALIZED_NAME_MESSAGE_FROM_BUYER = "message_from_buyer";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FROM_BUYER)
  private String messageFromBuyer;

  public static final String SERIALIZED_NAME_MESSAGE_FROM_PAYMENT = "message_from_payment";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FROM_PAYMENT)
  private String messageFromPayment;

  public static final String SERIALIZED_NAME_IS_PAID = "is_paid";
  @SerializedName(SERIALIZED_NAME_IS_PAID)
  private Boolean isPaid;

  public static final String SERIALIZED_NAME_IS_SHIPPED = "is_shipped";
  @SerializedName(SERIALIZED_NAME_IS_SHIPPED)
  private Boolean isShipped;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "create_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private Long createTimestamp;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATE_TIMESTAMP = "update_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIMESTAMP)
  private Long updateTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Long updatedTimestamp;

  public static final String SERIALIZED_NAME_IS_GIFT = "is_gift";
  @SerializedName(SERIALIZED_NAME_IS_GIFT)
  private Boolean isGift;

  public static final String SERIALIZED_NAME_GIFT_MESSAGE = "gift_message";
  @SerializedName(SERIALIZED_NAME_GIFT_MESSAGE)
  private String giftMessage;

  public static final String SERIALIZED_NAME_GRANDTOTAL = "grandtotal";
  @SerializedName(SERIALIZED_NAME_GRANDTOTAL)
  private ShopReceiptGrandtotal grandtotal;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private ShopReceiptSubtotal subtotal;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private ShopReceiptTotalPrice totalPrice;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING_COST = "total_shipping_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING_COST)
  private ShopReceiptTotalShippingCost totalShippingCost;

  public static final String SERIALIZED_NAME_TOTAL_TAX_COST = "total_tax_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_COST)
  private ShopReceiptTotalTaxCost totalTaxCost;

  public static final String SERIALIZED_NAME_TOTAL_VAT_COST = "total_vat_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_VAT_COST)
  private ShopReceiptTotalVatCost totalVatCost;

  public static final String SERIALIZED_NAME_DISCOUNT_AMT = "discount_amt";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMT)
  private ShopReceiptDiscountAmt discountAmt;

  public static final String SERIALIZED_NAME_GIFT_WRAP_PRICE = "gift_wrap_price";
  @SerializedName(SERIALIZED_NAME_GIFT_WRAP_PRICE)
  private ShopReceiptGiftWrapPrice giftWrapPrice;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<ShopReceiptShipmentsInner> shipments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<ShopReceiptTransactionsInner> transactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<ShopReceiptRefundsInner> refunds = new ArrayList<>();

  public ShopReceiptsResultsInner() {
  }

  public ShopReceiptsResultsInner receiptId(Long receiptId) {
    
    this.receiptId = receiptId;
    return this;
  }

   /**
   * The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
   * minimum: 1
   * @return receiptId
  **/
  @javax.annotation.Nullable

  public Long getReceiptId() {
    return receiptId;
  }


  public void setReceiptId(Long receiptId) {
    this.receiptId = receiptId;
  }


  public ShopReceiptsResultsInner receiptType(Long receiptType) {
    
    this.receiptType = receiptType;
    return this;
  }

   /**
   * The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
   * minimum: 0
   * @return receiptType
  **/
  @javax.annotation.Nullable

  public Long getReceiptType() {
    return receiptType;
  }


  public void setReceiptType(Long receiptType) {
    this.receiptType = receiptType;
  }


  public ShopReceiptsResultsInner sellerUserId(Long sellerUserId) {
    
    this.sellerUserId = sellerUserId;
    return this;
  }

   /**
   * The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
   * minimum: 1
   * @return sellerUserId
  **/
  @javax.annotation.Nullable

  public Long getSellerUserId() {
    return sellerUserId;
  }


  public void setSellerUserId(Long sellerUserId) {
    this.sellerUserId = sellerUserId;
  }


  public ShopReceiptsResultsInner sellerEmail(String sellerEmail) {
    
    this.sellerEmail = sellerEmail;
    return this;
  }

   /**
   * The email address string for the seller of the listing.
   * @return sellerEmail
  **/
  @javax.annotation.Nullable

  public String getSellerEmail() {
    return sellerEmail;
  }


  public void setSellerEmail(String sellerEmail) {
    this.sellerEmail = sellerEmail;
  }


  public ShopReceiptsResultsInner buyerUserId(Long buyerUserId) {
    
    this.buyerUserId = buyerUserId;
    return this;
  }

   /**
   * The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
   * minimum: 1
   * @return buyerUserId
  **/
  @javax.annotation.Nullable

  public Long getBuyerUserId() {
    return buyerUserId;
  }


  public void setBuyerUserId(Long buyerUserId) {
    this.buyerUserId = buyerUserId;
  }


  public ShopReceiptsResultsInner buyerEmail(String buyerEmail) {
    
    this.buyerEmail = buyerEmail;
    return this;
  }

   /**
   * The email address string for the buyer of the listing.
   * @return buyerEmail
  **/
  @javax.annotation.Nullable

  public String getBuyerEmail() {
    return buyerEmail;
  }


  public void setBuyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
  }


  public ShopReceiptsResultsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name string for the recipient in the shipping address.
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ShopReceiptsResultsInner firstLine(String firstLine) {
    
    this.firstLine = firstLine;
    return this;
  }

   /**
   * The first address line string for the recipient in the shipping address.
   * @return firstLine
  **/
  @javax.annotation.Nullable

  public String getFirstLine() {
    return firstLine;
  }


  public void setFirstLine(String firstLine) {
    this.firstLine = firstLine;
  }


  public ShopReceiptsResultsInner secondLine(String secondLine) {
    
    this.secondLine = secondLine;
    return this;
  }

   /**
   * The optional second address line string for the recipient in the shipping address.
   * @return secondLine
  **/
  @javax.annotation.Nullable

  public String getSecondLine() {
    return secondLine;
  }


  public void setSecondLine(String secondLine) {
    this.secondLine = secondLine;
  }


  public ShopReceiptsResultsInner city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * The city string for the recipient in the shipping address.
   * @return city
  **/
  @javax.annotation.Nullable

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public ShopReceiptsResultsInner state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state string for the recipient in the shipping address.
   * @return state
  **/
  @javax.annotation.Nullable

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public ShopReceiptsResultsInner zip(String zip) {
    
    this.zip = zip;
    return this;
  }

   /**
   * The zip code string (not necessarily a number) for the recipient in the shipping address.
   * @return zip
  **/
  @javax.annotation.Nullable

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    this.zip = zip;
  }


  public ShopReceiptsResultsInner status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The current order status string. One of: &#x60;paid&#x60;, &#x60;completed&#x60;, &#x60;open&#x60;, &#x60;payment processing&#x60; or &#x60;canceled&#x60;.
   * @return status
  **/
  @javax.annotation.Nullable

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ShopReceiptsResultsInner formattedAddress(String formattedAddress) {
    
    this.formattedAddress = formattedAddress;
    return this;
  }

   /**
   * The formatted shipping address string for the recipient in the shipping address.
   * @return formattedAddress
  **/
  @javax.annotation.Nullable

  public String getFormattedAddress() {
    return formattedAddress;
  }


  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public ShopReceiptsResultsInner countryIso(String countryIso) {
    
    this.countryIso = countryIso;
    return this;
  }

   /**
   * The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
   * @return countryIso
  **/
  @javax.annotation.Nullable

  public String getCountryIso() {
    return countryIso;
  }


  public void setCountryIso(String countryIso) {
    this.countryIso = countryIso;
  }


  public ShopReceiptsResultsInner paymentMethod(String paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * The payment method string identifying purchaser&#39;s payment method, which must be one of: \\&#39;cc\\&#39; (credit card), \\&#39;paypal\\&#39;, \\&#39;check\\&#39;, \\&#39;mo\\&#39; (money order), \\&#39;bt\\&#39; (bank transfer), \\&#39;other\\&#39;, \\&#39;ideal\\&#39;, \\&#39;sofort\\&#39;, \\&#39;apple_pay\\&#39;, \\&#39;google\\&#39;, \\&#39;android_pay\\&#39;, \\&#39;google_pay\\&#39;, \\&#39;klarna\\&#39;, \\&#39;k_pay_in_4\\&#39; (klarna), \\&#39;k_pay_in_3\\&#39; (klarna), or \\&#39;k_financing\\&#39; (klarna).
   * @return paymentMethod
  **/
  @javax.annotation.Nullable

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public ShopReceiptsResultsInner paymentEmail(String paymentEmail) {
    
    this.paymentEmail = paymentEmail;
    return this;
  }

   /**
   * The email address string for the email address to which to send payment confirmation
   * @return paymentEmail
  **/
  @javax.annotation.Nullable

  public String getPaymentEmail() {
    return paymentEmail;
  }


  public void setPaymentEmail(String paymentEmail) {
    this.paymentEmail = paymentEmail;
  }


  public ShopReceiptsResultsInner messageFromSeller(String messageFromSeller) {
    
    this.messageFromSeller = messageFromSeller;
    return this;
  }

   /**
   * An optional message string from the seller.
   * @return messageFromSeller
  **/
  @javax.annotation.Nullable

  public String getMessageFromSeller() {
    return messageFromSeller;
  }


  public void setMessageFromSeller(String messageFromSeller) {
    this.messageFromSeller = messageFromSeller;
  }


  public ShopReceiptsResultsInner messageFromBuyer(String messageFromBuyer) {
    
    this.messageFromBuyer = messageFromBuyer;
    return this;
  }

   /**
   * An optional message string from the buyer.
   * @return messageFromBuyer
  **/
  @javax.annotation.Nullable

  public String getMessageFromBuyer() {
    return messageFromBuyer;
  }


  public void setMessageFromBuyer(String messageFromBuyer) {
    this.messageFromBuyer = messageFromBuyer;
  }


  public ShopReceiptsResultsInner messageFromPayment(String messageFromPayment) {
    
    this.messageFromPayment = messageFromPayment;
    return this;
  }

   /**
   * The machine-generated acknowledgement string from the payment system.
   * @return messageFromPayment
  **/
  @javax.annotation.Nullable

  public String getMessageFromPayment() {
    return messageFromPayment;
  }


  public void setMessageFromPayment(String messageFromPayment) {
    this.messageFromPayment = messageFromPayment;
  }


  public ShopReceiptsResultsInner isPaid(Boolean isPaid) {
    
    this.isPaid = isPaid;
    return this;
  }

   /**
   * When true, buyer paid for this purchase.
   * @return isPaid
  **/
  @javax.annotation.Nullable

  public Boolean getIsPaid() {
    return isPaid;
  }


  public void setIsPaid(Boolean isPaid) {
    this.isPaid = isPaid;
  }


  public ShopReceiptsResultsInner isShipped(Boolean isShipped) {
    
    this.isShipped = isShipped;
    return this;
  }

   /**
   * When true, seller shipped the products.
   * @return isShipped
  **/
  @javax.annotation.Nullable

  public Boolean getIsShipped() {
    return isShipped;
  }


  public void setIsShipped(Boolean isShipped) {
    this.isShipped = isShipped;
  }


  public ShopReceiptsResultsInner createTimestamp(Long createTimestamp) {
    
    this.createTimestamp = createTimestamp;
    return this;
  }

   /**
   * The receipt\\&#39;s creation time, in epoch seconds.
   * minimum: 946684800
   * @return createTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreateTimestamp() {
    return createTimestamp;
  }


  public void setCreateTimestamp(Long createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public ShopReceiptsResultsInner createdTimestamp(Long createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The receipt\\&#39;s creation time, in epoch seconds.
   * minimum: 946684800
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ShopReceiptsResultsInner updateTimestamp(Long updateTimestamp) {
    
    this.updateTimestamp = updateTimestamp;
    return this;
  }

   /**
   * The time of the last update to the receipt, in epoch seconds.
   * minimum: 946684800
   * @return updateTimestamp
  **/
  @javax.annotation.Nullable

  public Long getUpdateTimestamp() {
    return updateTimestamp;
  }


  public void setUpdateTimestamp(Long updateTimestamp) {
    this.updateTimestamp = updateTimestamp;
  }


  public ShopReceiptsResultsInner updatedTimestamp(Long updatedTimestamp) {
    
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The time of the last update to the receipt, in epoch seconds.
   * minimum: 946684800
   * @return updatedTimestamp
  **/
  @javax.annotation.Nullable

  public Long getUpdatedTimestamp() {
    return updatedTimestamp;
  }


  public void setUpdatedTimestamp(Long updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public ShopReceiptsResultsInner isGift(Boolean isGift) {
    
    this.isGift = isGift;
    return this;
  }

   /**
   * When true, the buyer indicated this purchase is a gift.
   * @return isGift
  **/
  @javax.annotation.Nullable

  public Boolean getIsGift() {
    return isGift;
  }


  public void setIsGift(Boolean isGift) {
    this.isGift = isGift;
  }


  public ShopReceiptsResultsInner giftMessage(String giftMessage) {
    
    this.giftMessage = giftMessage;
    return this;
  }

   /**
   * A gift message string the buyer requests delivered with the product.
   * @return giftMessage
  **/
  @javax.annotation.Nullable

  public String getGiftMessage() {
    return giftMessage;
  }


  public void setGiftMessage(String giftMessage) {
    this.giftMessage = giftMessage;
  }


  public ShopReceiptsResultsInner grandtotal(ShopReceiptGrandtotal grandtotal) {
    
    this.grandtotal = grandtotal;
    return this;
  }

   /**
   * Get grandtotal
   * @return grandtotal
  **/
  @javax.annotation.Nullable

  public ShopReceiptGrandtotal getGrandtotal() {
    return grandtotal;
  }


  public void setGrandtotal(ShopReceiptGrandtotal grandtotal) {
    this.grandtotal = grandtotal;
  }


  public ShopReceiptsResultsInner subtotal(ShopReceiptSubtotal subtotal) {
    
    this.subtotal = subtotal;
    return this;
  }

   /**
   * Get subtotal
   * @return subtotal
  **/
  @javax.annotation.Nullable

  public ShopReceiptSubtotal getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(ShopReceiptSubtotal subtotal) {
    this.subtotal = subtotal;
  }


  public ShopReceiptsResultsInner totalPrice(ShopReceiptTotalPrice totalPrice) {
    
    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * Get totalPrice
   * @return totalPrice
  **/
  @javax.annotation.Nullable

  public ShopReceiptTotalPrice getTotalPrice() {
    return totalPrice;
  }


  public void setTotalPrice(ShopReceiptTotalPrice totalPrice) {
    this.totalPrice = totalPrice;
  }


  public ShopReceiptsResultsInner totalShippingCost(ShopReceiptTotalShippingCost totalShippingCost) {
    
    this.totalShippingCost = totalShippingCost;
    return this;
  }

   /**
   * Get totalShippingCost
   * @return totalShippingCost
  **/
  @javax.annotation.Nullable

  public ShopReceiptTotalShippingCost getTotalShippingCost() {
    return totalShippingCost;
  }


  public void setTotalShippingCost(ShopReceiptTotalShippingCost totalShippingCost) {
    this.totalShippingCost = totalShippingCost;
  }


  public ShopReceiptsResultsInner totalTaxCost(ShopReceiptTotalTaxCost totalTaxCost) {
    
    this.totalTaxCost = totalTaxCost;
    return this;
  }

   /**
   * Get totalTaxCost
   * @return totalTaxCost
  **/
  @javax.annotation.Nullable

  public ShopReceiptTotalTaxCost getTotalTaxCost() {
    return totalTaxCost;
  }


  public void setTotalTaxCost(ShopReceiptTotalTaxCost totalTaxCost) {
    this.totalTaxCost = totalTaxCost;
  }


  public ShopReceiptsResultsInner totalVatCost(ShopReceiptTotalVatCost totalVatCost) {
    
    this.totalVatCost = totalVatCost;
    return this;
  }

   /**
   * Get totalVatCost
   * @return totalVatCost
  **/
  @javax.annotation.Nullable

  public ShopReceiptTotalVatCost getTotalVatCost() {
    return totalVatCost;
  }


  public void setTotalVatCost(ShopReceiptTotalVatCost totalVatCost) {
    this.totalVatCost = totalVatCost;
  }


  public ShopReceiptsResultsInner discountAmt(ShopReceiptDiscountAmt discountAmt) {
    
    this.discountAmt = discountAmt;
    return this;
  }

   /**
   * Get discountAmt
   * @return discountAmt
  **/
  @javax.annotation.Nullable

  public ShopReceiptDiscountAmt getDiscountAmt() {
    return discountAmt;
  }


  public void setDiscountAmt(ShopReceiptDiscountAmt discountAmt) {
    this.discountAmt = discountAmt;
  }


  public ShopReceiptsResultsInner giftWrapPrice(ShopReceiptGiftWrapPrice giftWrapPrice) {
    
    this.giftWrapPrice = giftWrapPrice;
    return this;
  }

   /**
   * Get giftWrapPrice
   * @return giftWrapPrice
  **/
  @javax.annotation.Nullable

  public ShopReceiptGiftWrapPrice getGiftWrapPrice() {
    return giftWrapPrice;
  }


  public void setGiftWrapPrice(ShopReceiptGiftWrapPrice giftWrapPrice) {
    this.giftWrapPrice = giftWrapPrice;
  }


  public ShopReceiptsResultsInner shipments(List<ShopReceiptShipmentsInner> shipments) {
    
    this.shipments = shipments;
    return this;
  }

  public ShopReceiptsResultsInner addShipmentsItem(ShopReceiptShipmentsInner shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

   /**
   * A list of shipment statements for this receipt.
   * @return shipments
  **/
  @javax.annotation.Nullable

  public List<ShopReceiptShipmentsInner> getShipments() {
    return shipments;
  }


  public void setShipments(List<ShopReceiptShipmentsInner> shipments) {
    this.shipments = shipments;
  }


  public ShopReceiptsResultsInner transactions(List<ShopReceiptTransactionsInner> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public ShopReceiptsResultsInner addTransactionsItem(ShopReceiptTransactionsInner transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Array of transactions for the receipt.
   * @return transactions
  **/
  @javax.annotation.Nullable

  public List<ShopReceiptTransactionsInner> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<ShopReceiptTransactionsInner> transactions) {
    this.transactions = transactions;
  }


  public ShopReceiptsResultsInner refunds(List<ShopReceiptRefundsInner> refunds) {
    
    this.refunds = refunds;
    return this;
  }

  public ShopReceiptsResultsInner addRefundsItem(ShopReceiptRefundsInner refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * Refunds for a given receipt.
   * @return refunds
  **/
  @javax.annotation.Nullable

  public List<ShopReceiptRefundsInner> getRefunds() {
    return refunds;
  }


  public void setRefunds(List<ShopReceiptRefundsInner> refunds) {
    this.refunds = refunds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopReceiptsResultsInner shopReceiptsResultsInner = (ShopReceiptsResultsInner) o;
    return Objects.equals(this.receiptId, shopReceiptsResultsInner.receiptId) &&
        Objects.equals(this.receiptType, shopReceiptsResultsInner.receiptType) &&
        Objects.equals(this.sellerUserId, shopReceiptsResultsInner.sellerUserId) &&
        Objects.equals(this.sellerEmail, shopReceiptsResultsInner.sellerEmail) &&
        Objects.equals(this.buyerUserId, shopReceiptsResultsInner.buyerUserId) &&
        Objects.equals(this.buyerEmail, shopReceiptsResultsInner.buyerEmail) &&
        Objects.equals(this.name, shopReceiptsResultsInner.name) &&
        Objects.equals(this.firstLine, shopReceiptsResultsInner.firstLine) &&
        Objects.equals(this.secondLine, shopReceiptsResultsInner.secondLine) &&
        Objects.equals(this.city, shopReceiptsResultsInner.city) &&
        Objects.equals(this.state, shopReceiptsResultsInner.state) &&
        Objects.equals(this.zip, shopReceiptsResultsInner.zip) &&
        Objects.equals(this.status, shopReceiptsResultsInner.status) &&
        Objects.equals(this.formattedAddress, shopReceiptsResultsInner.formattedAddress) &&
        Objects.equals(this.countryIso, shopReceiptsResultsInner.countryIso) &&
        Objects.equals(this.paymentMethod, shopReceiptsResultsInner.paymentMethod) &&
        Objects.equals(this.paymentEmail, shopReceiptsResultsInner.paymentEmail) &&
        Objects.equals(this.messageFromSeller, shopReceiptsResultsInner.messageFromSeller) &&
        Objects.equals(this.messageFromBuyer, shopReceiptsResultsInner.messageFromBuyer) &&
        Objects.equals(this.messageFromPayment, shopReceiptsResultsInner.messageFromPayment) &&
        Objects.equals(this.isPaid, shopReceiptsResultsInner.isPaid) &&
        Objects.equals(this.isShipped, shopReceiptsResultsInner.isShipped) &&
        Objects.equals(this.createTimestamp, shopReceiptsResultsInner.createTimestamp) &&
        Objects.equals(this.createdTimestamp, shopReceiptsResultsInner.createdTimestamp) &&
        Objects.equals(this.updateTimestamp, shopReceiptsResultsInner.updateTimestamp) &&
        Objects.equals(this.updatedTimestamp, shopReceiptsResultsInner.updatedTimestamp) &&
        Objects.equals(this.isGift, shopReceiptsResultsInner.isGift) &&
        Objects.equals(this.giftMessage, shopReceiptsResultsInner.giftMessage) &&
        Objects.equals(this.grandtotal, shopReceiptsResultsInner.grandtotal) &&
        Objects.equals(this.subtotal, shopReceiptsResultsInner.subtotal) &&
        Objects.equals(this.totalPrice, shopReceiptsResultsInner.totalPrice) &&
        Objects.equals(this.totalShippingCost, shopReceiptsResultsInner.totalShippingCost) &&
        Objects.equals(this.totalTaxCost, shopReceiptsResultsInner.totalTaxCost) &&
        Objects.equals(this.totalVatCost, shopReceiptsResultsInner.totalVatCost) &&
        Objects.equals(this.discountAmt, shopReceiptsResultsInner.discountAmt) &&
        Objects.equals(this.giftWrapPrice, shopReceiptsResultsInner.giftWrapPrice) &&
        Objects.equals(this.shipments, shopReceiptsResultsInner.shipments) &&
        Objects.equals(this.transactions, shopReceiptsResultsInner.transactions) &&
        Objects.equals(this.refunds, shopReceiptsResultsInner.refunds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiptId, receiptType, sellerUserId, sellerEmail, buyerUserId, buyerEmail, name, firstLine, secondLine, city, state, zip, status, formattedAddress, countryIso, paymentMethod, paymentEmail, messageFromSeller, messageFromBuyer, messageFromPayment, isPaid, isShipped, createTimestamp, createdTimestamp, updateTimestamp, updatedTimestamp, isGift, giftMessage, grandtotal, subtotal, totalPrice, totalShippingCost, totalTaxCost, totalVatCost, discountAmt, giftWrapPrice, shipments, transactions, refunds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopReceiptsResultsInner {\n");
    sb.append("    receiptId: ").append(toIndentedString(receiptId)).append("\n");
    sb.append("    receiptType: ").append(toIndentedString(receiptType)).append("\n");
    sb.append("    sellerUserId: ").append(toIndentedString(sellerUserId)).append("\n");
    sb.append("    sellerEmail: ").append(toIndentedString(sellerEmail)).append("\n");
    sb.append("    buyerUserId: ").append(toIndentedString(buyerUserId)).append("\n");
    sb.append("    buyerEmail: ").append(toIndentedString(buyerEmail)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firstLine: ").append(toIndentedString(firstLine)).append("\n");
    sb.append("    secondLine: ").append(toIndentedString(secondLine)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    countryIso: ").append(toIndentedString(countryIso)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentEmail: ").append(toIndentedString(paymentEmail)).append("\n");
    sb.append("    messageFromSeller: ").append(toIndentedString(messageFromSeller)).append("\n");
    sb.append("    messageFromBuyer: ").append(toIndentedString(messageFromBuyer)).append("\n");
    sb.append("    messageFromPayment: ").append(toIndentedString(messageFromPayment)).append("\n");
    sb.append("    isPaid: ").append(toIndentedString(isPaid)).append("\n");
    sb.append("    isShipped: ").append(toIndentedString(isShipped)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updateTimestamp: ").append(toIndentedString(updateTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    isGift: ").append(toIndentedString(isGift)).append("\n");
    sb.append("    giftMessage: ").append(toIndentedString(giftMessage)).append("\n");
    sb.append("    grandtotal: ").append(toIndentedString(grandtotal)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    totalShippingCost: ").append(toIndentedString(totalShippingCost)).append("\n");
    sb.append("    totalTaxCost: ").append(toIndentedString(totalTaxCost)).append("\n");
    sb.append("    totalVatCost: ").append(toIndentedString(totalVatCost)).append("\n");
    sb.append("    discountAmt: ").append(toIndentedString(discountAmt)).append("\n");
    sb.append("    giftWrapPrice: ").append(toIndentedString(giftWrapPrice)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receipt_id");
    openapiFields.add("receipt_type");
    openapiFields.add("seller_user_id");
    openapiFields.add("seller_email");
    openapiFields.add("buyer_user_id");
    openapiFields.add("buyer_email");
    openapiFields.add("name");
    openapiFields.add("first_line");
    openapiFields.add("second_line");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zip");
    openapiFields.add("status");
    openapiFields.add("formatted_address");
    openapiFields.add("country_iso");
    openapiFields.add("payment_method");
    openapiFields.add("payment_email");
    openapiFields.add("message_from_seller");
    openapiFields.add("message_from_buyer");
    openapiFields.add("message_from_payment");
    openapiFields.add("is_paid");
    openapiFields.add("is_shipped");
    openapiFields.add("create_timestamp");
    openapiFields.add("created_timestamp");
    openapiFields.add("update_timestamp");
    openapiFields.add("updated_timestamp");
    openapiFields.add("is_gift");
    openapiFields.add("gift_message");
    openapiFields.add("grandtotal");
    openapiFields.add("subtotal");
    openapiFields.add("total_price");
    openapiFields.add("total_shipping_cost");
    openapiFields.add("total_tax_cost");
    openapiFields.add("total_vat_cost");
    openapiFields.add("discount_amt");
    openapiFields.add("gift_wrap_price");
    openapiFields.add("shipments");
    openapiFields.add("transactions");
    openapiFields.add("refunds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShopReceiptsResultsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShopReceiptsResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShopReceiptsResultsInner is not found in the empty JSON string", ShopReceiptsResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShopReceiptsResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShopReceiptsResultsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("seller_email") != null && !jsonObj.get("seller_email").isJsonNull()) && !jsonObj.get("seller_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_email").toString()));
      }
      if ((jsonObj.get("buyer_email") != null && !jsonObj.get("buyer_email").isJsonNull()) && !jsonObj.get("buyer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("first_line") != null && !jsonObj.get("first_line").isJsonNull()) && !jsonObj.get("first_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_line").toString()));
      }
      if ((jsonObj.get("second_line") != null && !jsonObj.get("second_line").isJsonNull()) && !jsonObj.get("second_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `second_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("second_line").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("formatted_address") != null && !jsonObj.get("formatted_address").isJsonNull()) && !jsonObj.get("formatted_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatted_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatted_address").toString()));
      }
      if ((jsonObj.get("country_iso") != null && !jsonObj.get("country_iso").isJsonNull()) && !jsonObj.get("country_iso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_iso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_iso").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if ((jsonObj.get("payment_email") != null && !jsonObj.get("payment_email").isJsonNull()) && !jsonObj.get("payment_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_email").toString()));
      }
      if ((jsonObj.get("message_from_seller") != null && !jsonObj.get("message_from_seller").isJsonNull()) && !jsonObj.get("message_from_seller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_from_seller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_from_seller").toString()));
      }
      if ((jsonObj.get("message_from_buyer") != null && !jsonObj.get("message_from_buyer").isJsonNull()) && !jsonObj.get("message_from_buyer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_from_buyer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_from_buyer").toString()));
      }
      if ((jsonObj.get("message_from_payment") != null && !jsonObj.get("message_from_payment").isJsonNull()) && !jsonObj.get("message_from_payment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_from_payment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_from_payment").toString()));
      }
      if ((jsonObj.get("gift_message") != null && !jsonObj.get("gift_message").isJsonNull()) && !jsonObj.get("gift_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gift_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gift_message").toString()));
      }
      // validate the optional field `grandtotal`
      if (jsonObj.get("grandtotal") != null && !jsonObj.get("grandtotal").isJsonNull()) {
        ShopReceiptGrandtotal.validateJsonObject(jsonObj.getAsJsonObject("grandtotal"));
      }
      // validate the optional field `subtotal`
      if (jsonObj.get("subtotal") != null && !jsonObj.get("subtotal").isJsonNull()) {
        ShopReceiptSubtotal.validateJsonObject(jsonObj.getAsJsonObject("subtotal"));
      }
      // validate the optional field `total_price`
      if (jsonObj.get("total_price") != null && !jsonObj.get("total_price").isJsonNull()) {
        ShopReceiptTotalPrice.validateJsonObject(jsonObj.getAsJsonObject("total_price"));
      }
      // validate the optional field `total_shipping_cost`
      if (jsonObj.get("total_shipping_cost") != null && !jsonObj.get("total_shipping_cost").isJsonNull()) {
        ShopReceiptTotalShippingCost.validateJsonObject(jsonObj.getAsJsonObject("total_shipping_cost"));
      }
      // validate the optional field `total_tax_cost`
      if (jsonObj.get("total_tax_cost") != null && !jsonObj.get("total_tax_cost").isJsonNull()) {
        ShopReceiptTotalTaxCost.validateJsonObject(jsonObj.getAsJsonObject("total_tax_cost"));
      }
      // validate the optional field `total_vat_cost`
      if (jsonObj.get("total_vat_cost") != null && !jsonObj.get("total_vat_cost").isJsonNull()) {
        ShopReceiptTotalVatCost.validateJsonObject(jsonObj.getAsJsonObject("total_vat_cost"));
      }
      // validate the optional field `discount_amt`
      if (jsonObj.get("discount_amt") != null && !jsonObj.get("discount_amt").isJsonNull()) {
        ShopReceiptDiscountAmt.validateJsonObject(jsonObj.getAsJsonObject("discount_amt"));
      }
      // validate the optional field `gift_wrap_price`
      if (jsonObj.get("gift_wrap_price") != null && !jsonObj.get("gift_wrap_price").isJsonNull()) {
        ShopReceiptGiftWrapPrice.validateJsonObject(jsonObj.getAsJsonObject("gift_wrap_price"));
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            ShopReceiptShipmentsInner.validateJsonObject(jsonArrayshipments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            ShopReceiptTransactionsInner.validateJsonObject(jsonArraytransactions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            ShopReceiptRefundsInner.validateJsonObject(jsonArrayrefunds.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShopReceiptsResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShopReceiptsResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShopReceiptsResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShopReceiptsResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ShopReceiptsResultsInner>() {
           @Override
           public void write(JsonWriter out, ShopReceiptsResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShopReceiptsResultsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShopReceiptsResultsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShopReceiptsResultsInner
  * @throws IOException if the JSON string is invalid with respect to ShopReceiptsResultsInner
  */
  public static ShopReceiptsResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShopReceiptsResultsInner.class);
  }

 /**
  * Convert an instance of ShopReceiptsResultsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

