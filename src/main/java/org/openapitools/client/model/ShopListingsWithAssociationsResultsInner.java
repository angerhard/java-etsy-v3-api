/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

/**
 * The ShopListing resources found.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-18T13:10:02.644710400+01:00[Europe/Berlin]")
public class ShopListingsWithAssociationsResultsInner {
  public static final String SERIALIZED_NAME_LISTING_ID = "listing_id";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private Long listingId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_SHOP_ID = "shop_id";
  @SerializedName(SERIALIZED_NAME_SHOP_ID)
  private Long shopId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    SOLD_OUT("sold_out"),
    
    DRAFT("draft"),
    
    EXPIRED("expired");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_CREATION_TIMESTAMP = "creation_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATION_TIMESTAMP)
  private Long creationTimestamp;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_ENDING_TIMESTAMP = "ending_timestamp";
  @SerializedName(SERIALIZED_NAME_ENDING_TIMESTAMP)
  private Long endingTimestamp;

  public static final String SERIALIZED_NAME_ORIGINAL_CREATION_TIMESTAMP = "original_creation_timestamp";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CREATION_TIMESTAMP)
  private Long originalCreationTimestamp;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIMESTAMP = "last_modified_timestamp";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIMESTAMP)
  private Long lastModifiedTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Long updatedTimestamp;

  public static final String SERIALIZED_NAME_STATE_TIMESTAMP = "state_timestamp";
  @SerializedName(SERIALIZED_NAME_STATE_TIMESTAMP)
  private Long stateTimestamp;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_SHOP_SECTION_ID = "shop_section_id";
  @SerializedName(SERIALIZED_NAME_SHOP_SECTION_ID)
  private Long shopSectionId;

  public static final String SERIALIZED_NAME_FEATURED_RANK = "featured_rank";
  @SerializedName(SERIALIZED_NAME_FEATURED_RANK)
  private Long featuredRank;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_NUM_FAVORERS = "num_favorers";
  @SerializedName(SERIALIZED_NAME_NUM_FAVORERS)
  private Long numFavorers;

  public static final String SERIALIZED_NAME_NON_TAXABLE = "non_taxable";
  @SerializedName(SERIALIZED_NAME_NON_TAXABLE)
  private Boolean nonTaxable;

  public static final String SERIALIZED_NAME_IS_TAXABLE = "is_taxable";
  @SerializedName(SERIALIZED_NAME_IS_TAXABLE)
  private Boolean isTaxable;

  public static final String SERIALIZED_NAME_IS_CUSTOMIZABLE = "is_customizable";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOMIZABLE)
  private Boolean isCustomizable;

  public static final String SERIALIZED_NAME_IS_PERSONALIZABLE = "is_personalizable";
  @SerializedName(SERIALIZED_NAME_IS_PERSONALIZABLE)
  private Boolean isPersonalizable;

  public static final String SERIALIZED_NAME_PERSONALIZATION_IS_REQUIRED = "personalization_is_required";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_IS_REQUIRED)
  private Boolean personalizationIsRequired;

  public static final String SERIALIZED_NAME_PERSONALIZATION_CHAR_COUNT_MAX = "personalization_char_count_max";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_CHAR_COUNT_MAX)
  private Long personalizationCharCountMax;

  public static final String SERIALIZED_NAME_PERSONALIZATION_INSTRUCTIONS = "personalization_instructions";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_INSTRUCTIONS)
  private String personalizationInstructions;

  /**
   * An enumerated type string that indicates whether the listing is physical or a digital download.
   */
  @JsonAdapter(ListingTypeEnum.Adapter.class)
  public enum ListingTypeEnum {
    PHYSICAL("physical"),
    
    DOWNLOAD("download"),
    
    BOTH("both");

    private String value;

    ListingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ListingTypeEnum fromValue(String value) {
      for (ListingTypeEnum b : ListingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ListingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ListingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ListingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ListingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LISTING_TYPE = "listing_type";
  @SerializedName(SERIALIZED_NAME_LISTING_TYPE)
  private ListingTypeEnum listingType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<String> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_PROFILE_ID = "shipping_profile_id";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PROFILE_ID)
  private Long shippingProfileId;

  public static final String SERIALIZED_NAME_RETURN_POLICY_ID = "return_policy_id";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICY_ID)
  private Long returnPolicyId;

  public static final String SERIALIZED_NAME_PROCESSING_MIN = "processing_min";
  @SerializedName(SERIALIZED_NAME_PROCESSING_MIN)
  private Long processingMin;

  public static final String SERIALIZED_NAME_PROCESSING_MAX = "processing_max";
  @SerializedName(SERIALIZED_NAME_PROCESSING_MAX)
  private Long processingMax;

  /**
   * An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires &#39;is_supply&#39; and &#39;when_made&#39;.
   */
  @JsonAdapter(WhoMadeEnum.Adapter.class)
  public enum WhoMadeEnum {
    I_DID("i_did"),
    
    SOMEONE_ELSE("someone_else"),
    
    COLLECTIVE("collective");

    private String value;

    WhoMadeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WhoMadeEnum fromValue(String value) {
      for (WhoMadeEnum b : WhoMadeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WhoMadeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WhoMadeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WhoMadeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WhoMadeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WHO_MADE = "who_made";
  @SerializedName(SERIALIZED_NAME_WHO_MADE)
  private WhoMadeEnum whoMade;

  /**
   * An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires &#39;is_supply&#39; and &#39;who_made&#39;.
   */
  @JsonAdapter(WhenMadeEnum.Adapter.class)
  public enum WhenMadeEnum {
    MADE_TO_ORDER("made_to_order"),
    
    _2020_2023("2020_2023"),
    
    _2010_2019("2010_2019"),
    
    _2004_2009("2004_2009"),
    
    BEFORE_2004("before_2004"),
    
    _2000_2003("2000_2003"),
    
    _1990S("1990s"),
    
    _1980S("1980s"),
    
    _1970S("1970s"),
    
    _1960S("1960s"),
    
    _1950S("1950s"),
    
    _1940S("1940s"),
    
    _1930S("1930s"),
    
    _1920S("1920s"),
    
    _1910S("1910s"),
    
    _1900S("1900s"),
    
    _1800S("1800s"),
    
    _1700S("1700s"),
    
    BEFORE_1700("before_1700");

    private String value;

    WhenMadeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WhenMadeEnum fromValue(String value) {
      for (WhenMadeEnum b : WhenMadeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WhenMadeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WhenMadeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WhenMadeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WhenMadeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WHEN_MADE = "when_made";
  @SerializedName(SERIALIZED_NAME_WHEN_MADE)
  private WhenMadeEnum whenMade;

  public static final String SERIALIZED_NAME_IS_SUPPLY = "is_supply";
  @SerializedName(SERIALIZED_NAME_IS_SUPPLY)
  private Boolean isSupply;

  public static final String SERIALIZED_NAME_ITEM_WEIGHT = "item_weight";
  @SerializedName(SERIALIZED_NAME_ITEM_WEIGHT)
  private Float itemWeight;

  /**
   * A string defining the units used to measure the weight of the product. Default value is null.
   */
  @JsonAdapter(ItemWeightUnitEnum.Adapter.class)
  public enum ItemWeightUnitEnum {
    OZ("oz"),
    
    LB("lb"),
    
    G("g"),
    
    KG("kg");

    private String value;

    ItemWeightUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemWeightUnitEnum fromValue(String value) {
      for (ItemWeightUnitEnum b : ItemWeightUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ItemWeightUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemWeightUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemWeightUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemWeightUnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ITEM_WEIGHT_UNIT = "item_weight_unit";
  @SerializedName(SERIALIZED_NAME_ITEM_WEIGHT_UNIT)
  private ItemWeightUnitEnum itemWeightUnit;

  public static final String SERIALIZED_NAME_ITEM_LENGTH = "item_length";
  @SerializedName(SERIALIZED_NAME_ITEM_LENGTH)
  private Float itemLength;

  public static final String SERIALIZED_NAME_ITEM_WIDTH = "item_width";
  @SerializedName(SERIALIZED_NAME_ITEM_WIDTH)
  private Float itemWidth;

  public static final String SERIALIZED_NAME_ITEM_HEIGHT = "item_height";
  @SerializedName(SERIALIZED_NAME_ITEM_HEIGHT)
  private Float itemHeight;

  /**
   * A string defining the units used to measure the dimensions of the product. Default value is null.
   */
  @JsonAdapter(ItemDimensionsUnitEnum.Adapter.class)
  public enum ItemDimensionsUnitEnum {
    IN("in"),
    
    FT("ft"),
    
    MM("mm"),
    
    CM("cm"),
    
    M("m"),
    
    YD("yd"),
    
    INCHES("inches");

    private String value;

    ItemDimensionsUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemDimensionsUnitEnum fromValue(String value) {
      for (ItemDimensionsUnitEnum b : ItemDimensionsUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ItemDimensionsUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemDimensionsUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemDimensionsUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemDimensionsUnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ITEM_DIMENSIONS_UNIT = "item_dimensions_unit";
  @SerializedName(SERIALIZED_NAME_ITEM_DIMENSIONS_UNIT)
  private ItemDimensionsUnitEnum itemDimensionsUnit;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "is_private";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private List<String> style = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_DATA = "file_data";
  @SerializedName(SERIALIZED_NAME_FILE_DATA)
  private String fileData;

  public static final String SERIALIZED_NAME_HAS_VARIATIONS = "has_variations";
  @SerializedName(SERIALIZED_NAME_HAS_VARIATIONS)
  private Boolean hasVariations;

  public static final String SERIALIZED_NAME_SHOULD_AUTO_RENEW = "should_auto_renew";
  @SerializedName(SERIALIZED_NAME_SHOULD_AUTO_RENEW)
  private Boolean shouldAutoRenew;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ShopListingPrice price;

  public static final String SERIALIZED_NAME_TAXONOMY_ID = "taxonomy_id";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_ID)
  private Long taxonomyId;

  public static final String SERIALIZED_NAME_SHIPPING_PROFILE = "shipping_profile";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PROFILE)
  private ShopListingWithAssociationsShippingProfile shippingProfile;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private ShopListingWithAssociationsUser user;

  public static final String SERIALIZED_NAME_SHOP = "shop";
  @SerializedName(SERIALIZED_NAME_SHOP)
  private ShopListingWithAssociationsShop shop;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ShopListingWithAssociationsImagesInner> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<ShopListingWithAssociationsVideosInner> videos = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private ShopListingWithAssociationsInventory inventory;

  public static final String SERIALIZED_NAME_PRODUCTION_PARTNERS = "production_partners";
  @SerializedName(SERIALIZED_NAME_PRODUCTION_PARTNERS)
  private List<ShopListingWithAssociationsProductionPartnersInner> productionPartners = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKUS = "skus";
  @SerializedName(SERIALIZED_NAME_SKUS)
  private List<String> skus = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<ShopListingWithAssociationsTranslationsInner> translations = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private Long views;

  public ShopListingsWithAssociationsResultsInner() {
  }

  public ShopListingsWithAssociationsResultsInner listingId(Long listingId) {
    
    this.listingId = listingId;
    return this;
  }

   /**
   * The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
   * minimum: 1
   * @return listingId
  **/
  @javax.annotation.Nullable

  public Long getListingId() {
    return listingId;
  }


  public void setListingId(Long listingId) {
    this.listingId = listingId;
  }


  public ShopListingsWithAssociationsResultsInner userId(Long userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
   * minimum: 1
   * @return userId
  **/
  @javax.annotation.Nullable

  public Long getUserId() {
    return userId;
  }


  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public ShopListingsWithAssociationsResultsInner shopId(Long shopId) {
    
    this.shopId = shopId;
    return this;
  }

   /**
   * The unique positive non-zero numeric ID for an Etsy Shop.
   * minimum: 1
   * @return shopId
  **/
  @javax.annotation.Nullable

  public Long getShopId() {
    return shopId;
  }


  public void setShopId(Long shopId) {
    this.shopId = shopId;
  }


  public ShopListingsWithAssociationsResultsInner title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The listing&#39;s title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, &amp; and + characters once each.
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ShopListingsWithAssociationsResultsInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description string of the product for sale in the listing.
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ShopListingsWithAssociationsResultsInner state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com.
   * @return state
  **/
  @javax.annotation.Nullable

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public ShopListingsWithAssociationsResultsInner creationTimestamp(Long creationTimestamp) {
    
    this.creationTimestamp = creationTimestamp;
    return this;
  }

   /**
   * The listing\\&#39;s creation time, in epoch seconds.
   * minimum: 946684800
   * @return creationTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreationTimestamp() {
    return creationTimestamp;
  }


  public void setCreationTimestamp(Long creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner createdTimestamp(Long createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The listing\\&#39;s creation time, in epoch seconds.
   * minimum: 946684800
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner endingTimestamp(Long endingTimestamp) {
    
    this.endingTimestamp = endingTimestamp;
    return this;
  }

   /**
   * The listing\\&#39;s expiration time, in epoch seconds.
   * minimum: 946684800
   * @return endingTimestamp
  **/
  @javax.annotation.Nullable

  public Long getEndingTimestamp() {
    return endingTimestamp;
  }


  public void setEndingTimestamp(Long endingTimestamp) {
    this.endingTimestamp = endingTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner originalCreationTimestamp(Long originalCreationTimestamp) {
    
    this.originalCreationTimestamp = originalCreationTimestamp;
    return this;
  }

   /**
   * The listing\\&#39;s creation time, in epoch seconds.
   * minimum: 946684800
   * @return originalCreationTimestamp
  **/
  @javax.annotation.Nullable

  public Long getOriginalCreationTimestamp() {
    return originalCreationTimestamp;
  }


  public void setOriginalCreationTimestamp(Long originalCreationTimestamp) {
    this.originalCreationTimestamp = originalCreationTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner lastModifiedTimestamp(Long lastModifiedTimestamp) {
    
    this.lastModifiedTimestamp = lastModifiedTimestamp;
    return this;
  }

   /**
   * The time of the last update to the listing, in epoch seconds.
   * minimum: 946684800
   * @return lastModifiedTimestamp
  **/
  @javax.annotation.Nullable

  public Long getLastModifiedTimestamp() {
    return lastModifiedTimestamp;
  }


  public void setLastModifiedTimestamp(Long lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner updatedTimestamp(Long updatedTimestamp) {
    
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The time of the last update to the listing, in epoch seconds.
   * minimum: 946684800
   * @return updatedTimestamp
  **/
  @javax.annotation.Nullable

  public Long getUpdatedTimestamp() {
    return updatedTimestamp;
  }


  public void setUpdatedTimestamp(Long updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner stateTimestamp(Long stateTimestamp) {
    
    this.stateTimestamp = stateTimestamp;
    return this;
  }

   /**
   * The date and time of the last state change of this listing.
   * minimum: 946684800
   * @return stateTimestamp
  **/
  @javax.annotation.Nullable

  public Long getStateTimestamp() {
    return stateTimestamp;
  }


  public void setStateTimestamp(Long stateTimestamp) {
    this.stateTimestamp = stateTimestamp;
  }


  public ShopListingsWithAssociationsResultsInner quantity(Long quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
   * minimum: 0
   * @return quantity
  **/
  @javax.annotation.Nullable

  public Long getQuantity() {
    return quantity;
  }


  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public ShopListingsWithAssociationsResultsInner shopSectionId(Long shopSectionId) {
    
    this.shopSectionId = shopSectionId;
    return this;
  }

   /**
   * The numeric ID of a section in a specific Etsy shop.
   * minimum: 1
   * @return shopSectionId
  **/
  @javax.annotation.Nullable

  public Long getShopSectionId() {
    return shopSectionId;
  }


  public void setShopSectionId(Long shopSectionId) {
    this.shopSectionId = shopSectionId;
  }


  public ShopListingsWithAssociationsResultsInner featuredRank(Long featuredRank) {
    
    this.featuredRank = featuredRank;
    return this;
  }

   /**
   * The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
   * @return featuredRank
  **/
  @javax.annotation.Nullable

  public Long getFeaturedRank() {
    return featuredRank;
  }


  public void setFeaturedRank(Long featuredRank) {
    this.featuredRank = featuredRank;
  }


  public ShopListingsWithAssociationsResultsInner url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The full URL to the listing&#39;s page on Etsy.
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public ShopListingsWithAssociationsResultsInner numFavorers(Long numFavorers) {
    
    this.numFavorers = numFavorers;
    return this;
  }

   /**
   * The number of users who marked this Listing a favorite.
   * minimum: 0
   * @return numFavorers
  **/
  @javax.annotation.Nullable

  public Long getNumFavorers() {
    return numFavorers;
  }


  public void setNumFavorers(Long numFavorers) {
    this.numFavorers = numFavorers;
  }


  public ShopListingsWithAssociationsResultsInner nonTaxable(Boolean nonTaxable) {
    
    this.nonTaxable = nonTaxable;
    return this;
  }

   /**
   * When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
   * @return nonTaxable
  **/
  @javax.annotation.Nullable

  public Boolean getNonTaxable() {
    return nonTaxable;
  }


  public void setNonTaxable(Boolean nonTaxable) {
    this.nonTaxable = nonTaxable;
  }


  public ShopListingsWithAssociationsResultsInner isTaxable(Boolean isTaxable) {
    
    this.isTaxable = isTaxable;
    return this;
  }

   /**
   * When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
   * @return isTaxable
  **/
  @javax.annotation.Nullable

  public Boolean getIsTaxable() {
    return isTaxable;
  }


  public void setIsTaxable(Boolean isTaxable) {
    this.isTaxable = isTaxable;
  }


  public ShopListingsWithAssociationsResultsInner isCustomizable(Boolean isCustomizable) {
    
    this.isCustomizable = isCustomizable;
    return this;
  }

   /**
   * When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
   * @return isCustomizable
  **/
  @javax.annotation.Nullable

  public Boolean getIsCustomizable() {
    return isCustomizable;
  }


  public void setIsCustomizable(Boolean isCustomizable) {
    this.isCustomizable = isCustomizable;
  }


  public ShopListingsWithAssociationsResultsInner isPersonalizable(Boolean isPersonalizable) {
    
    this.isPersonalizable = isPersonalizable;
    return this;
  }

   /**
   * When true, this listing is personalizable. The default value is null.
   * @return isPersonalizable
  **/
  @javax.annotation.Nullable

  public Boolean getIsPersonalizable() {
    return isPersonalizable;
  }


  public void setIsPersonalizable(Boolean isPersonalizable) {
    this.isPersonalizable = isPersonalizable;
  }


  public ShopListingsWithAssociationsResultsInner personalizationIsRequired(Boolean personalizationIsRequired) {
    
    this.personalizationIsRequired = personalizationIsRequired;
    return this;
  }

   /**
   * When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is &#39;true&#39;.
   * @return personalizationIsRequired
  **/
  @javax.annotation.Nullable

  public Boolean getPersonalizationIsRequired() {
    return personalizationIsRequired;
  }


  public void setPersonalizationIsRequired(Boolean personalizationIsRequired) {
    this.personalizationIsRequired = personalizationIsRequired;
  }


  public ShopListingsWithAssociationsResultsInner personalizationCharCountMax(Long personalizationCharCountMax) {
    
    this.personalizationCharCountMax = personalizationCharCountMax;
    return this;
  }

   /**
   * This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is &#39;true&#39;.
   * @return personalizationCharCountMax
  **/
  @javax.annotation.Nullable

  public Long getPersonalizationCharCountMax() {
    return personalizationCharCountMax;
  }


  public void setPersonalizationCharCountMax(Long personalizationCharCountMax) {
    this.personalizationCharCountMax = personalizationCharCountMax;
  }


  public ShopListingsWithAssociationsResultsInner personalizationInstructions(String personalizationInstructions) {
    
    this.personalizationInstructions = personalizationInstructions;
    return this;
  }

   /**
   * When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is &#39;true&#39;.
   * @return personalizationInstructions
  **/
  @javax.annotation.Nullable

  public String getPersonalizationInstructions() {
    return personalizationInstructions;
  }


  public void setPersonalizationInstructions(String personalizationInstructions) {
    this.personalizationInstructions = personalizationInstructions;
  }


  public ShopListingsWithAssociationsResultsInner listingType(ListingTypeEnum listingType) {
    
    this.listingType = listingType;
    return this;
  }

   /**
   * An enumerated type string that indicates whether the listing is physical or a digital download.
   * @return listingType
  **/
  @javax.annotation.Nullable

  public ListingTypeEnum getListingType() {
    return listingType;
  }


  public void setListingType(ListingTypeEnum listingType) {
    this.listingType = listingType;
  }


  public ShopListingsWithAssociationsResultsInner tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, &#39;, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-&#39;™©®]/u) Default value is null.
   * @return tags
  **/
  @javax.annotation.Nullable

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ShopListingsWithAssociationsResultsInner materials(List<String> materials) {
    
    this.materials = materials;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addMaterialsItem(String materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

   /**
   * A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
   * @return materials
  **/
  @javax.annotation.Nullable

  public List<String> getMaterials() {
    return materials;
  }


  public void setMaterials(List<String> materials) {
    this.materials = materials;
  }


  public ShopListingsWithAssociationsResultsInner shippingProfileId(Long shippingProfileId) {
    
    this.shippingProfileId = shippingProfileId;
    return this;
  }

   /**
   * The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;.
   * minimum: 1
   * @return shippingProfileId
  **/
  @javax.annotation.Nullable

  public Long getShippingProfileId() {
    return shippingProfileId;
  }


  public void setShippingProfileId(Long shippingProfileId) {
    this.shippingProfileId = shippingProfileId;
  }


  public ShopListingsWithAssociationsResultsInner returnPolicyId(Long returnPolicyId) {
    
    this.returnPolicyId = returnPolicyId;
    return this;
  }

   /**
   * The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
   * minimum: 1
   * @return returnPolicyId
  **/
  @javax.annotation.Nullable

  public Long getReturnPolicyId() {
    return returnPolicyId;
  }


  public void setReturnPolicyId(Long returnPolicyId) {
    this.returnPolicyId = returnPolicyId;
  }


  public ShopListingsWithAssociationsResultsInner processingMin(Long processingMin) {
    
    this.processingMin = processingMin;
    return this;
  }

   /**
   * The minimum number of days required to process this listing. Default value is null.
   * minimum: 0
   * @return processingMin
  **/
  @javax.annotation.Nullable

  public Long getProcessingMin() {
    return processingMin;
  }


  public void setProcessingMin(Long processingMin) {
    this.processingMin = processingMin;
  }


  public ShopListingsWithAssociationsResultsInner processingMax(Long processingMax) {
    
    this.processingMax = processingMax;
    return this;
  }

   /**
   * The maximum number of days required to process this listing. Default value is null.
   * minimum: 0
   * @return processingMax
  **/
  @javax.annotation.Nullable

  public Long getProcessingMax() {
    return processingMax;
  }


  public void setProcessingMax(Long processingMax) {
    this.processingMax = processingMax;
  }


  public ShopListingsWithAssociationsResultsInner whoMade(WhoMadeEnum whoMade) {
    
    this.whoMade = whoMade;
    return this;
  }

   /**
   * An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires &#39;is_supply&#39; and &#39;when_made&#39;.
   * @return whoMade
  **/
  @javax.annotation.Nullable

  public WhoMadeEnum getWhoMade() {
    return whoMade;
  }


  public void setWhoMade(WhoMadeEnum whoMade) {
    this.whoMade = whoMade;
  }


  public ShopListingsWithAssociationsResultsInner whenMade(WhenMadeEnum whenMade) {
    
    this.whenMade = whenMade;
    return this;
  }

   /**
   * An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires &#39;is_supply&#39; and &#39;who_made&#39;.
   * @return whenMade
  **/
  @javax.annotation.Nullable

  public WhenMadeEnum getWhenMade() {
    return whenMade;
  }


  public void setWhenMade(WhenMadeEnum whenMade) {
    this.whenMade = whenMade;
  }


  public ShopListingsWithAssociationsResultsInner isSupply(Boolean isSupply) {
    
    this.isSupply = isSupply;
    return this;
  }

   /**
   * When true, tags the listing as a supply product, else indicates that it&#39;s a finished product. Helps buyers locate the listing under the Supplies heading. Requires &#39;who_made&#39; and &#39;when_made&#39;.
   * @return isSupply
  **/
  @javax.annotation.Nullable

  public Boolean getIsSupply() {
    return isSupply;
  }


  public void setIsSupply(Boolean isSupply) {
    this.isSupply = isSupply;
  }


  public ShopListingsWithAssociationsResultsInner itemWeight(Float itemWeight) {
    
    this.itemWeight = itemWeight;
    return this;
  }

   /**
   * The numeric weight of the product measured in units set in \\&#39;item_weight_unit\\&#39;. Default value is null. If set, the value must be greater than 0.
   * @return itemWeight
  **/
  @javax.annotation.Nullable

  public Float getItemWeight() {
    return itemWeight;
  }


  public void setItemWeight(Float itemWeight) {
    this.itemWeight = itemWeight;
  }


  public ShopListingsWithAssociationsResultsInner itemWeightUnit(ItemWeightUnitEnum itemWeightUnit) {
    
    this.itemWeightUnit = itemWeightUnit;
    return this;
  }

   /**
   * A string defining the units used to measure the weight of the product. Default value is null.
   * @return itemWeightUnit
  **/
  @javax.annotation.Nullable

  public ItemWeightUnitEnum getItemWeightUnit() {
    return itemWeightUnit;
  }


  public void setItemWeightUnit(ItemWeightUnitEnum itemWeightUnit) {
    this.itemWeightUnit = itemWeightUnit;
  }


  public ShopListingsWithAssociationsResultsInner itemLength(Float itemLength) {
    
    this.itemLength = itemLength;
    return this;
  }

   /**
   * The numeric length of the product measured in units set in \\&#39;item_dimensions_unit\\&#39;. Default value is null. If set, the value must be greater than 0.
   * @return itemLength
  **/
  @javax.annotation.Nullable

  public Float getItemLength() {
    return itemLength;
  }


  public void setItemLength(Float itemLength) {
    this.itemLength = itemLength;
  }


  public ShopListingsWithAssociationsResultsInner itemWidth(Float itemWidth) {
    
    this.itemWidth = itemWidth;
    return this;
  }

   /**
   * The numeric width of the product measured in units set in \\&#39;item_dimensions_unit\\&#39;. Default value is null. If set, the value must be greater than 0.
   * @return itemWidth
  **/
  @javax.annotation.Nullable

  public Float getItemWidth() {
    return itemWidth;
  }


  public void setItemWidth(Float itemWidth) {
    this.itemWidth = itemWidth;
  }


  public ShopListingsWithAssociationsResultsInner itemHeight(Float itemHeight) {
    
    this.itemHeight = itemHeight;
    return this;
  }

   /**
   * The numeric length of the product measured in units set in \\&#39;item_dimensions_unit\\&#39;. Default value is null. If set, the value must be greater than 0.
   * @return itemHeight
  **/
  @javax.annotation.Nullable

  public Float getItemHeight() {
    return itemHeight;
  }


  public void setItemHeight(Float itemHeight) {
    this.itemHeight = itemHeight;
  }


  public ShopListingsWithAssociationsResultsInner itemDimensionsUnit(ItemDimensionsUnitEnum itemDimensionsUnit) {
    
    this.itemDimensionsUnit = itemDimensionsUnit;
    return this;
  }

   /**
   * A string defining the units used to measure the dimensions of the product. Default value is null.
   * @return itemDimensionsUnit
  **/
  @javax.annotation.Nullable

  public ItemDimensionsUnitEnum getItemDimensionsUnit() {
    return itemDimensionsUnit;
  }


  public void setItemDimensionsUnit(ItemDimensionsUnitEnum itemDimensionsUnit) {
    this.itemDimensionsUnit = itemDimensionsUnit;
  }


  public ShopListingsWithAssociationsResultsInner isPrivate(Boolean isPrivate) {
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * When true, this is a private listing intended for a specific buyer and hidden from shop view.
   * @return isPrivate
  **/
  @javax.annotation.Nullable

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public ShopListingsWithAssociationsResultsInner style(List<String> style) {
    
    this.style = style;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addStyleItem(String styleItem) {
    if (this.style == null) {
      this.style = new ArrayList<>();
    }
    this.style.add(styleItem);
    return this;
  }

   /**
   * An array of style strings for this listing, each of which is free-form text string such as \\\&quot;Formal\\\&quot;, or \\\&quot;Steampunk\\\&quot;. When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
   * @return style
  **/
  @javax.annotation.Nullable

  public List<String> getStyle() {
    return style;
  }


  public void setStyle(List<String> style) {
    this.style = style;
  }


  public ShopListingsWithAssociationsResultsInner fileData(String fileData) {
    
    this.fileData = fileData;
    return this;
  }

   /**
   * A string describing the files attached to a digital listing.
   * @return fileData
  **/
  @javax.annotation.Nullable

  public String getFileData() {
    return fileData;
  }


  public void setFileData(String fileData) {
    this.fileData = fileData;
  }


  public ShopListingsWithAssociationsResultsInner hasVariations(Boolean hasVariations) {
    
    this.hasVariations = hasVariations;
    return this;
  }

   /**
   * When true, the listing has variations.
   * @return hasVariations
  **/
  @javax.annotation.Nullable

  public Boolean getHasVariations() {
    return hasVariations;
  }


  public void setHasVariations(Boolean hasVariations) {
    this.hasVariations = hasVariations;
  }


  public ShopListingsWithAssociationsResultsInner shouldAutoRenew(Boolean shouldAutoRenew) {
    
    this.shouldAutoRenew = shouldAutoRenew;
    return this;
  }

   /**
   * When true, renews a listing for four months upon expiration.
   * @return shouldAutoRenew
  **/
  @javax.annotation.Nullable

  public Boolean getShouldAutoRenew() {
    return shouldAutoRenew;
  }


  public void setShouldAutoRenew(Boolean shouldAutoRenew) {
    this.shouldAutoRenew = shouldAutoRenew;
  }


  public ShopListingsWithAssociationsResultsInner language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * The IETF language tag for the default language of the listing. Ex: &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;.
   * @return language
  **/
  @javax.annotation.Nullable

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public ShopListingsWithAssociationsResultsInner price(ShopListingPrice price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable

  public ShopListingPrice getPrice() {
    return price;
  }


  public void setPrice(ShopListingPrice price) {
    this.price = price;
  }


  public ShopListingsWithAssociationsResultsInner taxonomyId(Long taxonomyId) {
    
    this.taxonomyId = taxonomyId;
    return this;
  }

   /**
   * The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
   * @return taxonomyId
  **/
  @javax.annotation.Nullable

  public Long getTaxonomyId() {
    return taxonomyId;
  }


  public void setTaxonomyId(Long taxonomyId) {
    this.taxonomyId = taxonomyId;
  }


  public ShopListingsWithAssociationsResultsInner shippingProfile(ShopListingWithAssociationsShippingProfile shippingProfile) {
    
    this.shippingProfile = shippingProfile;
    return this;
  }

   /**
   * Get shippingProfile
   * @return shippingProfile
  **/
  @javax.annotation.Nullable

  public ShopListingWithAssociationsShippingProfile getShippingProfile() {
    return shippingProfile;
  }


  public void setShippingProfile(ShopListingWithAssociationsShippingProfile shippingProfile) {
    this.shippingProfile = shippingProfile;
  }


  public ShopListingsWithAssociationsResultsInner user(ShopListingWithAssociationsUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public ShopListingWithAssociationsUser getUser() {
    return user;
  }


  public void setUser(ShopListingWithAssociationsUser user) {
    this.user = user;
  }


  public ShopListingsWithAssociationsResultsInner shop(ShopListingWithAssociationsShop shop) {
    
    this.shop = shop;
    return this;
  }

   /**
   * Get shop
   * @return shop
  **/
  @javax.annotation.Nullable

  public ShopListingWithAssociationsShop getShop() {
    return shop;
  }


  public void setShop(ShopListingWithAssociationsShop shop) {
    this.shop = shop;
  }


  public ShopListingsWithAssociationsResultsInner images(List<ShopListingWithAssociationsImagesInner> images) {
    
    this.images = images;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addImagesItem(ShopListingWithAssociationsImagesInner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Represents a list of listing image resources, each of which contains the reference URLs and metadata for an image
   * @return images
  **/
  @javax.annotation.Nullable

  public List<ShopListingWithAssociationsImagesInner> getImages() {
    return images;
  }


  public void setImages(List<ShopListingWithAssociationsImagesInner> images) {
    this.images = images;
  }


  public ShopListingsWithAssociationsResultsInner videos(List<ShopListingWithAssociationsVideosInner> videos) {
    
    this.videos = videos;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addVideosItem(ShopListingWithAssociationsVideosInner videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

   /**
   * The single video associated with a listing.
   * @return videos
  **/
  @javax.annotation.Nullable

  public List<ShopListingWithAssociationsVideosInner> getVideos() {
    return videos;
  }


  public void setVideos(List<ShopListingWithAssociationsVideosInner> videos) {
    this.videos = videos;
  }


  public ShopListingsWithAssociationsResultsInner inventory(ShopListingWithAssociationsInventory inventory) {
    
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @javax.annotation.Nullable

  public ShopListingWithAssociationsInventory getInventory() {
    return inventory;
  }


  public void setInventory(ShopListingWithAssociationsInventory inventory) {
    this.inventory = inventory;
  }


  public ShopListingsWithAssociationsResultsInner productionPartners(List<ShopListingWithAssociationsProductionPartnersInner> productionPartners) {
    
    this.productionPartners = productionPartners;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addProductionPartnersItem(ShopListingWithAssociationsProductionPartnersInner productionPartnersItem) {
    if (this.productionPartners == null) {
      this.productionPartners = new ArrayList<>();
    }
    this.productionPartners.add(productionPartnersItem);
    return this;
  }

   /**
   * Represents a list of production partners for a shop.
   * @return productionPartners
  **/
  @javax.annotation.Nullable

  public List<ShopListingWithAssociationsProductionPartnersInner> getProductionPartners() {
    return productionPartners;
  }


  public void setProductionPartners(List<ShopListingWithAssociationsProductionPartnersInner> productionPartners) {
    this.productionPartners = productionPartners;
  }


  public ShopListingsWithAssociationsResultsInner skus(List<String> skus) {
    
    this.skus = skus;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addSkusItem(String skusItem) {
    if (this.skus == null) {
      this.skus = new ArrayList<>();
    }
    this.skus.add(skusItem);
    return this;
  }

   /**
   * A list of SKU strings for the listing. SKUs will only appear if the requesting user owns the shop and a valid matching OAuth 2 token is provided. When requested without the token it will be an empty array.
   * @return skus
  **/
  @javax.annotation.Nullable

  public List<String> getSkus() {
    return skus;
  }


  public void setSkus(List<String> skus) {
    this.skus = skus;
  }


  public ShopListingsWithAssociationsResultsInner translations(List<ShopListingWithAssociationsTranslationsInner> translations) {
    
    this.translations = translations;
    return this;
  }

  public ShopListingsWithAssociationsResultsInner addTranslationsItem(ShopListingWithAssociationsTranslationsInner translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * An array of translations for the listing. Default value is an empty array.
   * @return translations
  **/
  @javax.annotation.Nullable

  public List<ShopListingWithAssociationsTranslationsInner> getTranslations() {
    return translations;
  }


  public void setTranslations(List<ShopListingWithAssociationsTranslationsInner> translations) {
    this.translations = translations;
  }


  public ShopListingsWithAssociationsResultsInner views(Long views) {
    
    this.views = views;
    return this;
  }

   /**
   * The number of times the listing has been viewed. This value is tabulated once per day and **only for active listings**, so the value is not real-time. If &#x60;0&#x60;, the listing has either not been viewed, not yet tabulated, was not active during the last tabulation or there was an error fetching the value. If a value is expected, call &#x60;getListing&#x60; to confirm the value.
   * @return views
  **/
  @javax.annotation.Nullable

  public Long getViews() {
    return views;
  }


  public void setViews(Long views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopListingsWithAssociationsResultsInner shopListingsWithAssociationsResultsInner = (ShopListingsWithAssociationsResultsInner) o;
    return Objects.equals(this.listingId, shopListingsWithAssociationsResultsInner.listingId) &&
        Objects.equals(this.userId, shopListingsWithAssociationsResultsInner.userId) &&
        Objects.equals(this.shopId, shopListingsWithAssociationsResultsInner.shopId) &&
        Objects.equals(this.title, shopListingsWithAssociationsResultsInner.title) &&
        Objects.equals(this.description, shopListingsWithAssociationsResultsInner.description) &&
        Objects.equals(this.state, shopListingsWithAssociationsResultsInner.state) &&
        Objects.equals(this.creationTimestamp, shopListingsWithAssociationsResultsInner.creationTimestamp) &&
        Objects.equals(this.createdTimestamp, shopListingsWithAssociationsResultsInner.createdTimestamp) &&
        Objects.equals(this.endingTimestamp, shopListingsWithAssociationsResultsInner.endingTimestamp) &&
        Objects.equals(this.originalCreationTimestamp, shopListingsWithAssociationsResultsInner.originalCreationTimestamp) &&
        Objects.equals(this.lastModifiedTimestamp, shopListingsWithAssociationsResultsInner.lastModifiedTimestamp) &&
        Objects.equals(this.updatedTimestamp, shopListingsWithAssociationsResultsInner.updatedTimestamp) &&
        Objects.equals(this.stateTimestamp, shopListingsWithAssociationsResultsInner.stateTimestamp) &&
        Objects.equals(this.quantity, shopListingsWithAssociationsResultsInner.quantity) &&
        Objects.equals(this.shopSectionId, shopListingsWithAssociationsResultsInner.shopSectionId) &&
        Objects.equals(this.featuredRank, shopListingsWithAssociationsResultsInner.featuredRank) &&
        Objects.equals(this.url, shopListingsWithAssociationsResultsInner.url) &&
        Objects.equals(this.numFavorers, shopListingsWithAssociationsResultsInner.numFavorers) &&
        Objects.equals(this.nonTaxable, shopListingsWithAssociationsResultsInner.nonTaxable) &&
        Objects.equals(this.isTaxable, shopListingsWithAssociationsResultsInner.isTaxable) &&
        Objects.equals(this.isCustomizable, shopListingsWithAssociationsResultsInner.isCustomizable) &&
        Objects.equals(this.isPersonalizable, shopListingsWithAssociationsResultsInner.isPersonalizable) &&
        Objects.equals(this.personalizationIsRequired, shopListingsWithAssociationsResultsInner.personalizationIsRequired) &&
        Objects.equals(this.personalizationCharCountMax, shopListingsWithAssociationsResultsInner.personalizationCharCountMax) &&
        Objects.equals(this.personalizationInstructions, shopListingsWithAssociationsResultsInner.personalizationInstructions) &&
        Objects.equals(this.listingType, shopListingsWithAssociationsResultsInner.listingType) &&
        Objects.equals(this.tags, shopListingsWithAssociationsResultsInner.tags) &&
        Objects.equals(this.materials, shopListingsWithAssociationsResultsInner.materials) &&
        Objects.equals(this.shippingProfileId, shopListingsWithAssociationsResultsInner.shippingProfileId) &&
        Objects.equals(this.returnPolicyId, shopListingsWithAssociationsResultsInner.returnPolicyId) &&
        Objects.equals(this.processingMin, shopListingsWithAssociationsResultsInner.processingMin) &&
        Objects.equals(this.processingMax, shopListingsWithAssociationsResultsInner.processingMax) &&
        Objects.equals(this.whoMade, shopListingsWithAssociationsResultsInner.whoMade) &&
        Objects.equals(this.whenMade, shopListingsWithAssociationsResultsInner.whenMade) &&
        Objects.equals(this.isSupply, shopListingsWithAssociationsResultsInner.isSupply) &&
        Objects.equals(this.itemWeight, shopListingsWithAssociationsResultsInner.itemWeight) &&
        Objects.equals(this.itemWeightUnit, shopListingsWithAssociationsResultsInner.itemWeightUnit) &&
        Objects.equals(this.itemLength, shopListingsWithAssociationsResultsInner.itemLength) &&
        Objects.equals(this.itemWidth, shopListingsWithAssociationsResultsInner.itemWidth) &&
        Objects.equals(this.itemHeight, shopListingsWithAssociationsResultsInner.itemHeight) &&
        Objects.equals(this.itemDimensionsUnit, shopListingsWithAssociationsResultsInner.itemDimensionsUnit) &&
        Objects.equals(this.isPrivate, shopListingsWithAssociationsResultsInner.isPrivate) &&
        Objects.equals(this.style, shopListingsWithAssociationsResultsInner.style) &&
        Objects.equals(this.fileData, shopListingsWithAssociationsResultsInner.fileData) &&
        Objects.equals(this.hasVariations, shopListingsWithAssociationsResultsInner.hasVariations) &&
        Objects.equals(this.shouldAutoRenew, shopListingsWithAssociationsResultsInner.shouldAutoRenew) &&
        Objects.equals(this.language, shopListingsWithAssociationsResultsInner.language) &&
        Objects.equals(this.price, shopListingsWithAssociationsResultsInner.price) &&
        Objects.equals(this.taxonomyId, shopListingsWithAssociationsResultsInner.taxonomyId) &&
        Objects.equals(this.shippingProfile, shopListingsWithAssociationsResultsInner.shippingProfile) &&
        Objects.equals(this.user, shopListingsWithAssociationsResultsInner.user) &&
        Objects.equals(this.shop, shopListingsWithAssociationsResultsInner.shop) &&
        Objects.equals(this.images, shopListingsWithAssociationsResultsInner.images) &&
        Objects.equals(this.videos, shopListingsWithAssociationsResultsInner.videos) &&
        Objects.equals(this.inventory, shopListingsWithAssociationsResultsInner.inventory) &&
        Objects.equals(this.productionPartners, shopListingsWithAssociationsResultsInner.productionPartners) &&
        Objects.equals(this.skus, shopListingsWithAssociationsResultsInner.skus) &&
        Objects.equals(this.translations, shopListingsWithAssociationsResultsInner.translations) &&
        Objects.equals(this.views, shopListingsWithAssociationsResultsInner.views);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(listingId, userId, shopId, title, description, state, creationTimestamp, createdTimestamp, endingTimestamp, originalCreationTimestamp, lastModifiedTimestamp, updatedTimestamp, stateTimestamp, quantity, shopSectionId, featuredRank, url, numFavorers, nonTaxable, isTaxable, isCustomizable, isPersonalizable, personalizationIsRequired, personalizationCharCountMax, personalizationInstructions, listingType, tags, materials, shippingProfileId, returnPolicyId, processingMin, processingMax, whoMade, whenMade, isSupply, itemWeight, itemWeightUnit, itemLength, itemWidth, itemHeight, itemDimensionsUnit, isPrivate, style, fileData, hasVariations, shouldAutoRenew, language, price, taxonomyId, shippingProfile, user, shop, images, videos, inventory, productionPartners, skus, translations, views);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopListingsWithAssociationsResultsInner {\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    shopId: ").append(toIndentedString(shopId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    endingTimestamp: ").append(toIndentedString(endingTimestamp)).append("\n");
    sb.append("    originalCreationTimestamp: ").append(toIndentedString(originalCreationTimestamp)).append("\n");
    sb.append("    lastModifiedTimestamp: ").append(toIndentedString(lastModifiedTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    stateTimestamp: ").append(toIndentedString(stateTimestamp)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    shopSectionId: ").append(toIndentedString(shopSectionId)).append("\n");
    sb.append("    featuredRank: ").append(toIndentedString(featuredRank)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    numFavorers: ").append(toIndentedString(numFavorers)).append("\n");
    sb.append("    nonTaxable: ").append(toIndentedString(nonTaxable)).append("\n");
    sb.append("    isTaxable: ").append(toIndentedString(isTaxable)).append("\n");
    sb.append("    isCustomizable: ").append(toIndentedString(isCustomizable)).append("\n");
    sb.append("    isPersonalizable: ").append(toIndentedString(isPersonalizable)).append("\n");
    sb.append("    personalizationIsRequired: ").append(toIndentedString(personalizationIsRequired)).append("\n");
    sb.append("    personalizationCharCountMax: ").append(toIndentedString(personalizationCharCountMax)).append("\n");
    sb.append("    personalizationInstructions: ").append(toIndentedString(personalizationInstructions)).append("\n");
    sb.append("    listingType: ").append(toIndentedString(listingType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    shippingProfileId: ").append(toIndentedString(shippingProfileId)).append("\n");
    sb.append("    returnPolicyId: ").append(toIndentedString(returnPolicyId)).append("\n");
    sb.append("    processingMin: ").append(toIndentedString(processingMin)).append("\n");
    sb.append("    processingMax: ").append(toIndentedString(processingMax)).append("\n");
    sb.append("    whoMade: ").append(toIndentedString(whoMade)).append("\n");
    sb.append("    whenMade: ").append(toIndentedString(whenMade)).append("\n");
    sb.append("    isSupply: ").append(toIndentedString(isSupply)).append("\n");
    sb.append("    itemWeight: ").append(toIndentedString(itemWeight)).append("\n");
    sb.append("    itemWeightUnit: ").append(toIndentedString(itemWeightUnit)).append("\n");
    sb.append("    itemLength: ").append(toIndentedString(itemLength)).append("\n");
    sb.append("    itemWidth: ").append(toIndentedString(itemWidth)).append("\n");
    sb.append("    itemHeight: ").append(toIndentedString(itemHeight)).append("\n");
    sb.append("    itemDimensionsUnit: ").append(toIndentedString(itemDimensionsUnit)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    fileData: ").append(toIndentedString(fileData)).append("\n");
    sb.append("    hasVariations: ").append(toIndentedString(hasVariations)).append("\n");
    sb.append("    shouldAutoRenew: ").append(toIndentedString(shouldAutoRenew)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    taxonomyId: ").append(toIndentedString(taxonomyId)).append("\n");
    sb.append("    shippingProfile: ").append(toIndentedString(shippingProfile)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    shop: ").append(toIndentedString(shop)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    productionPartners: ").append(toIndentedString(productionPartners)).append("\n");
    sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("listing_id");
    openapiFields.add("user_id");
    openapiFields.add("shop_id");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("state");
    openapiFields.add("creation_timestamp");
    openapiFields.add("created_timestamp");
    openapiFields.add("ending_timestamp");
    openapiFields.add("original_creation_timestamp");
    openapiFields.add("last_modified_timestamp");
    openapiFields.add("updated_timestamp");
    openapiFields.add("state_timestamp");
    openapiFields.add("quantity");
    openapiFields.add("shop_section_id");
    openapiFields.add("featured_rank");
    openapiFields.add("url");
    openapiFields.add("num_favorers");
    openapiFields.add("non_taxable");
    openapiFields.add("is_taxable");
    openapiFields.add("is_customizable");
    openapiFields.add("is_personalizable");
    openapiFields.add("personalization_is_required");
    openapiFields.add("personalization_char_count_max");
    openapiFields.add("personalization_instructions");
    openapiFields.add("listing_type");
    openapiFields.add("tags");
    openapiFields.add("materials");
    openapiFields.add("shipping_profile_id");
    openapiFields.add("return_policy_id");
    openapiFields.add("processing_min");
    openapiFields.add("processing_max");
    openapiFields.add("who_made");
    openapiFields.add("when_made");
    openapiFields.add("is_supply");
    openapiFields.add("item_weight");
    openapiFields.add("item_weight_unit");
    openapiFields.add("item_length");
    openapiFields.add("item_width");
    openapiFields.add("item_height");
    openapiFields.add("item_dimensions_unit");
    openapiFields.add("is_private");
    openapiFields.add("style");
    openapiFields.add("file_data");
    openapiFields.add("has_variations");
    openapiFields.add("should_auto_renew");
    openapiFields.add("language");
    openapiFields.add("price");
    openapiFields.add("taxonomy_id");
    openapiFields.add("shipping_profile");
    openapiFields.add("user");
    openapiFields.add("shop");
    openapiFields.add("images");
    openapiFields.add("videos");
    openapiFields.add("inventory");
    openapiFields.add("production_partners");
    openapiFields.add("skus");
    openapiFields.add("translations");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShopListingsWithAssociationsResultsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShopListingsWithAssociationsResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShopListingsWithAssociationsResultsInner is not found in the empty JSON string", ShopListingsWithAssociationsResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShopListingsWithAssociationsResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShopListingsWithAssociationsResultsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("personalization_instructions") != null && !jsonObj.get("personalization_instructions").isJsonNull()) && !jsonObj.get("personalization_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalization_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalization_instructions").toString()));
      }
      if ((jsonObj.get("listing_type") != null && !jsonObj.get("listing_type").isJsonNull()) && !jsonObj.get("listing_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
      }
      if ((jsonObj.get("who_made") != null && !jsonObj.get("who_made").isJsonNull()) && !jsonObj.get("who_made").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `who_made` to be a primitive type in the JSON string but got `%s`", jsonObj.get("who_made").toString()));
      }
      if ((jsonObj.get("when_made") != null && !jsonObj.get("when_made").isJsonNull()) && !jsonObj.get("when_made").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `when_made` to be a primitive type in the JSON string but got `%s`", jsonObj.get("when_made").toString()));
      }
      if ((jsonObj.get("item_weight_unit") != null && !jsonObj.get("item_weight_unit").isJsonNull()) && !jsonObj.get("item_weight_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_weight_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_weight_unit").toString()));
      }
      if ((jsonObj.get("item_dimensions_unit") != null && !jsonObj.get("item_dimensions_unit").isJsonNull()) && !jsonObj.get("item_dimensions_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_dimensions_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_dimensions_unit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be an array in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      if ((jsonObj.get("file_data") != null && !jsonObj.get("file_data").isJsonNull()) && !jsonObj.get("file_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_data").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ShopListingPrice.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      // validate the optional field `shipping_profile`
      if (jsonObj.get("shipping_profile") != null && !jsonObj.get("shipping_profile").isJsonNull()) {
        ShopListingWithAssociationsShippingProfile.validateJsonObject(jsonObj.getAsJsonObject("shipping_profile"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        ShopListingWithAssociationsUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `shop`
      if (jsonObj.get("shop") != null && !jsonObj.get("shop").isJsonNull()) {
        ShopListingWithAssociationsShop.validateJsonObject(jsonObj.getAsJsonObject("shop"));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            ShopListingWithAssociationsImagesInner.validateJsonObject(jsonArrayimages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        JsonArray jsonArrayvideos = jsonObj.getAsJsonArray("videos");
        if (jsonArrayvideos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
          }

          // validate the optional field `videos` (array)
          for (int i = 0; i < jsonArrayvideos.size(); i++) {
            ShopListingWithAssociationsVideosInner.validateJsonObject(jsonArrayvideos.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `inventory`
      if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
        ShopListingWithAssociationsInventory.validateJsonObject(jsonObj.getAsJsonObject("inventory"));
      }
      if (jsonObj.get("production_partners") != null && !jsonObj.get("production_partners").isJsonNull()) {
        JsonArray jsonArrayproductionPartners = jsonObj.getAsJsonArray("production_partners");
        if (jsonArrayproductionPartners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("production_partners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `production_partners` to be an array in the JSON string but got `%s`", jsonObj.get("production_partners").toString()));
          }

          // validate the optional field `production_partners` (array)
          for (int i = 0; i < jsonArrayproductionPartners.size(); i++) {
            ShopListingWithAssociationsProductionPartnersInner.validateJsonObject(jsonArrayproductionPartners.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            ShopListingWithAssociationsTranslationsInner.validateJsonObject(jsonArraytranslations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShopListingsWithAssociationsResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShopListingsWithAssociationsResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShopListingsWithAssociationsResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShopListingsWithAssociationsResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ShopListingsWithAssociationsResultsInner>() {
           @Override
           public void write(JsonWriter out, ShopListingsWithAssociationsResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShopListingsWithAssociationsResultsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShopListingsWithAssociationsResultsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShopListingsWithAssociationsResultsInner
  * @throws IOException if the JSON string is invalid with respect to ShopListingsWithAssociationsResultsInner
  */
  public static ShopListingsWithAssociationsResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShopListingsWithAssociationsResultsInner.class);
  }

 /**
  * Convert an instance of ShopListingsWithAssociationsResultsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

