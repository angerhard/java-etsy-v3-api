/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.PaymentAdjustmentPaymentAdjustmentItemsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a refund, which applies to a prior Etsy payment. All monetary amounts are in USD pennies unless otherwise specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-30T11:53:28.314915500+01:00[Europe/Berlin]")
public class PaymentAdjustment {
  public static final String SERIALIZED_NAME_PAYMENT_ADJUSTMENT_ID = "payment_adjustment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ADJUSTMENT_ID)
  private Long paymentAdjustmentId;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private Long paymentId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_IS_SUCCESS = "is_success";
  @SerializedName(SERIALIZED_NAME_IS_SUCCESS)
  private Boolean isSuccess;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_REASON_CODE = "reason_code";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_TOTAL_ADJUSTMENT_AMOUNT = "total_adjustment_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ADJUSTMENT_AMOUNT)
  private Long totalAdjustmentAmount;

  public static final String SERIALIZED_NAME_SHOP_TOTAL_ADJUSTMENT_AMOUNT = "shop_total_adjustment_amount";
  @SerializedName(SERIALIZED_NAME_SHOP_TOTAL_ADJUSTMENT_AMOUNT)
  private Long shopTotalAdjustmentAmount;

  public static final String SERIALIZED_NAME_BUYER_TOTAL_ADJUSTMENT_AMOUNT = "buyer_total_adjustment_amount";
  @SerializedName(SERIALIZED_NAME_BUYER_TOTAL_ADJUSTMENT_AMOUNT)
  private Long buyerTotalAdjustmentAmount;

  public static final String SERIALIZED_NAME_TOTAL_FEE_ADJUSTMENT_AMOUNT = "total_fee_adjustment_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEE_ADJUSTMENT_AMOUNT)
  private Long totalFeeAdjustmentAmount;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "create_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private Long createTimestamp;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATE_TIMESTAMP = "update_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIMESTAMP)
  private Long updateTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Long updatedTimestamp;

  public static final String SERIALIZED_NAME_PAYMENT_ADJUSTMENT_ITEMS = "payment_adjustment_items";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ADJUSTMENT_ITEMS)
  private List<PaymentAdjustmentPaymentAdjustmentItemsInner> paymentAdjustmentItems = new ArrayList<>();

  public PaymentAdjustment() {
  }

  public PaymentAdjustment paymentAdjustmentId(Long paymentAdjustmentId) {
    
    this.paymentAdjustmentId = paymentAdjustmentId;
    return this;
  }

   /**
   * The numeric ID for a payment adjustment.
   * minimum: 1
   * @return paymentAdjustmentId
  **/
  @javax.annotation.Nullable

  public Long getPaymentAdjustmentId() {
    return paymentAdjustmentId;
  }


  public void setPaymentAdjustmentId(Long paymentAdjustmentId) {
    this.paymentAdjustmentId = paymentAdjustmentId;
  }


  public PaymentAdjustment paymentId(Long paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

   /**
   * A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
   * minimum: 1
   * @return paymentId
  **/
  @javax.annotation.Nullable

  public Long getPaymentId() {
    return paymentId;
  }


  public void setPaymentId(Long paymentId) {
    this.paymentId = paymentId;
  }


  public PaymentAdjustment status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status string of the payment adjustment.
   * @return status
  **/
  @javax.annotation.Nullable

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public PaymentAdjustment isSuccess(Boolean isSuccess) {
    
    this.isSuccess = isSuccess;
    return this;
  }

   /**
   * When true, the payment adjustment was or is likely to complete successfully.
   * @return isSuccess
  **/
  @javax.annotation.Nullable

  public Boolean getIsSuccess() {
    return isSuccess;
  }


  public void setIsSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
  }


  public PaymentAdjustment userId(Long userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
   * minimum: 1
   * @return userId
  **/
  @javax.annotation.Nullable

  public Long getUserId() {
    return userId;
  }


  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public PaymentAdjustment reasonCode(String reasonCode) {
    
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * A human-readable string describing the reason for the refund.
   * @return reasonCode
  **/
  @javax.annotation.Nullable

  public String getReasonCode() {
    return reasonCode;
  }


  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public PaymentAdjustment totalAdjustmentAmount(Long totalAdjustmentAmount) {
    
    this.totalAdjustmentAmount = totalAdjustmentAmount;
    return this;
  }

   /**
   * The total numeric amount of the refund in the payment currency.
   * minimum: 0
   * @return totalAdjustmentAmount
  **/
  @javax.annotation.Nullable

  public Long getTotalAdjustmentAmount() {
    return totalAdjustmentAmount;
  }


  public void setTotalAdjustmentAmount(Long totalAdjustmentAmount) {
    this.totalAdjustmentAmount = totalAdjustmentAmount;
  }


  public PaymentAdjustment shopTotalAdjustmentAmount(Long shopTotalAdjustmentAmount) {
    
    this.shopTotalAdjustmentAmount = shopTotalAdjustmentAmount;
    return this;
  }

   /**
   * The numeric amount of the refund in the shop currency.
   * minimum: 0
   * @return shopTotalAdjustmentAmount
  **/
  @javax.annotation.Nullable

  public Long getShopTotalAdjustmentAmount() {
    return shopTotalAdjustmentAmount;
  }


  public void setShopTotalAdjustmentAmount(Long shopTotalAdjustmentAmount) {
    this.shopTotalAdjustmentAmount = shopTotalAdjustmentAmount;
  }


  public PaymentAdjustment buyerTotalAdjustmentAmount(Long buyerTotalAdjustmentAmount) {
    
    this.buyerTotalAdjustmentAmount = buyerTotalAdjustmentAmount;
    return this;
  }

   /**
   * The numeric amount of the refund in the buyer currency.
   * minimum: 0
   * @return buyerTotalAdjustmentAmount
  **/
  @javax.annotation.Nullable

  public Long getBuyerTotalAdjustmentAmount() {
    return buyerTotalAdjustmentAmount;
  }


  public void setBuyerTotalAdjustmentAmount(Long buyerTotalAdjustmentAmount) {
    this.buyerTotalAdjustmentAmount = buyerTotalAdjustmentAmount;
  }


  public PaymentAdjustment totalFeeAdjustmentAmount(Long totalFeeAdjustmentAmount) {
    
    this.totalFeeAdjustmentAmount = totalFeeAdjustmentAmount;
    return this;
  }

   /**
   * The numeric amount of card processing fees associated with a payment adjustment.
   * minimum: 0
   * @return totalFeeAdjustmentAmount
  **/
  @javax.annotation.Nullable

  public Long getTotalFeeAdjustmentAmount() {
    return totalFeeAdjustmentAmount;
  }


  public void setTotalFeeAdjustmentAmount(Long totalFeeAdjustmentAmount) {
    this.totalFeeAdjustmentAmount = totalFeeAdjustmentAmount;
  }


  public PaymentAdjustment createTimestamp(Long createTimestamp) {
    
    this.createTimestamp = createTimestamp;
    return this;
  }

   /**
   * The transaction\\&#39;s creation date and time, in epoch seconds.
   * minimum: 946684800
   * @return createTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreateTimestamp() {
    return createTimestamp;
  }


  public void setCreateTimestamp(Long createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public PaymentAdjustment createdTimestamp(Long createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The transaction\\&#39;s creation date and time, in epoch seconds.
   * minimum: 946684800
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public PaymentAdjustment updateTimestamp(Long updateTimestamp) {
    
    this.updateTimestamp = updateTimestamp;
    return this;
  }

   /**
   * The date and time of the last change to the payment adjustment in epoch seconds.
   * minimum: 946684800
   * @return updateTimestamp
  **/
  @javax.annotation.Nullable

  public Long getUpdateTimestamp() {
    return updateTimestamp;
  }


  public void setUpdateTimestamp(Long updateTimestamp) {
    this.updateTimestamp = updateTimestamp;
  }


  public PaymentAdjustment updatedTimestamp(Long updatedTimestamp) {
    
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The date and time of the last change to the payment adjustment in epoch seconds.
   * minimum: 946684800
   * @return updatedTimestamp
  **/
  @javax.annotation.Nullable

  public Long getUpdatedTimestamp() {
    return updatedTimestamp;
  }


  public void setUpdatedTimestamp(Long updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public PaymentAdjustment paymentAdjustmentItems(List<PaymentAdjustmentPaymentAdjustmentItemsInner> paymentAdjustmentItems) {
    
    this.paymentAdjustmentItems = paymentAdjustmentItems;
    return this;
  }

  public PaymentAdjustment addPaymentAdjustmentItemsItem(PaymentAdjustmentPaymentAdjustmentItemsInner paymentAdjustmentItemsItem) {
    if (this.paymentAdjustmentItems == null) {
      this.paymentAdjustmentItems = new ArrayList<>();
    }
    this.paymentAdjustmentItems.add(paymentAdjustmentItemsItem);
    return this;
  }

   /**
   * List of payment adjustment line items.
   * @return paymentAdjustmentItems
  **/
  @javax.annotation.Nullable

  public List<PaymentAdjustmentPaymentAdjustmentItemsInner> getPaymentAdjustmentItems() {
    return paymentAdjustmentItems;
  }


  public void setPaymentAdjustmentItems(List<PaymentAdjustmentPaymentAdjustmentItemsInner> paymentAdjustmentItems) {
    this.paymentAdjustmentItems = paymentAdjustmentItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAdjustment paymentAdjustment = (PaymentAdjustment) o;
    return Objects.equals(this.paymentAdjustmentId, paymentAdjustment.paymentAdjustmentId) &&
        Objects.equals(this.paymentId, paymentAdjustment.paymentId) &&
        Objects.equals(this.status, paymentAdjustment.status) &&
        Objects.equals(this.isSuccess, paymentAdjustment.isSuccess) &&
        Objects.equals(this.userId, paymentAdjustment.userId) &&
        Objects.equals(this.reasonCode, paymentAdjustment.reasonCode) &&
        Objects.equals(this.totalAdjustmentAmount, paymentAdjustment.totalAdjustmentAmount) &&
        Objects.equals(this.shopTotalAdjustmentAmount, paymentAdjustment.shopTotalAdjustmentAmount) &&
        Objects.equals(this.buyerTotalAdjustmentAmount, paymentAdjustment.buyerTotalAdjustmentAmount) &&
        Objects.equals(this.totalFeeAdjustmentAmount, paymentAdjustment.totalFeeAdjustmentAmount) &&
        Objects.equals(this.createTimestamp, paymentAdjustment.createTimestamp) &&
        Objects.equals(this.createdTimestamp, paymentAdjustment.createdTimestamp) &&
        Objects.equals(this.updateTimestamp, paymentAdjustment.updateTimestamp) &&
        Objects.equals(this.updatedTimestamp, paymentAdjustment.updatedTimestamp) &&
        Objects.equals(this.paymentAdjustmentItems, paymentAdjustment.paymentAdjustmentItems);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentAdjustmentId, paymentId, status, isSuccess, userId, reasonCode, totalAdjustmentAmount, shopTotalAdjustmentAmount, buyerTotalAdjustmentAmount, totalFeeAdjustmentAmount, createTimestamp, createdTimestamp, updateTimestamp, updatedTimestamp, paymentAdjustmentItems);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAdjustment {\n");
    sb.append("    paymentAdjustmentId: ").append(toIndentedString(paymentAdjustmentId)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isSuccess: ").append(toIndentedString(isSuccess)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    totalAdjustmentAmount: ").append(toIndentedString(totalAdjustmentAmount)).append("\n");
    sb.append("    shopTotalAdjustmentAmount: ").append(toIndentedString(shopTotalAdjustmentAmount)).append("\n");
    sb.append("    buyerTotalAdjustmentAmount: ").append(toIndentedString(buyerTotalAdjustmentAmount)).append("\n");
    sb.append("    totalFeeAdjustmentAmount: ").append(toIndentedString(totalFeeAdjustmentAmount)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updateTimestamp: ").append(toIndentedString(updateTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    paymentAdjustmentItems: ").append(toIndentedString(paymentAdjustmentItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payment_adjustment_id");
    openapiFields.add("payment_id");
    openapiFields.add("status");
    openapiFields.add("is_success");
    openapiFields.add("user_id");
    openapiFields.add("reason_code");
    openapiFields.add("total_adjustment_amount");
    openapiFields.add("shop_total_adjustment_amount");
    openapiFields.add("buyer_total_adjustment_amount");
    openapiFields.add("total_fee_adjustment_amount");
    openapiFields.add("create_timestamp");
    openapiFields.add("created_timestamp");
    openapiFields.add("update_timestamp");
    openapiFields.add("updated_timestamp");
    openapiFields.add("payment_adjustment_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentAdjustment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentAdjustment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentAdjustment is not found in the empty JSON string", PaymentAdjustment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PaymentAdjustment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentAdjustment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("reason_code") != null && !jsonObj.get("reason_code").isJsonNull()) && !jsonObj.get("reason_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason_code").toString()));
      }
      if (jsonObj.get("payment_adjustment_items") != null && !jsonObj.get("payment_adjustment_items").isJsonNull()) {
        JsonArray jsonArraypaymentAdjustmentItems = jsonObj.getAsJsonArray("payment_adjustment_items");
        if (jsonArraypaymentAdjustmentItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_adjustment_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_adjustment_items` to be an array in the JSON string but got `%s`", jsonObj.get("payment_adjustment_items").toString()));
          }

          // validate the optional field `payment_adjustment_items` (array)
          for (int i = 0; i < jsonArraypaymentAdjustmentItems.size(); i++) {
            PaymentAdjustmentPaymentAdjustmentItemsInner.validateJsonObject(jsonArraypaymentAdjustmentItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAdjustment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAdjustment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAdjustment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAdjustment.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAdjustment>() {
           @Override
           public void write(JsonWriter out, PaymentAdjustment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAdjustment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentAdjustment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentAdjustment
  * @throws IOException if the JSON string is invalid with respect to PaymentAdjustment
  */
  public static PaymentAdjustment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAdjustment.class);
  }

 /**
  * Convert an instance of PaymentAdjustment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

