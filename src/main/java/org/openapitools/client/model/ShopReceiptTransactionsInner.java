/*
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.client.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

/**
 * Array of transactions for the receipt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-19T12:04:22.379753700+01:00[Europe/Berlin]")
public class ShopReceiptTransactionsInner {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private Long transactionId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SELLER_USER_ID = "seller_user_id";
  @SerializedName(SERIALIZED_NAME_SELLER_USER_ID)
  private Long sellerUserId;

  public static final String SERIALIZED_NAME_BUYER_USER_ID = "buyer_user_id";
  @SerializedName(SERIALIZED_NAME_BUYER_USER_ID)
  private Long buyerUserId;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "create_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private Long createTimestamp;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_PAID_TIMESTAMP = "paid_timestamp";
  @SerializedName(SERIALIZED_NAME_PAID_TIMESTAMP)
  private Long paidTimestamp;

  public static final String SERIALIZED_NAME_SHIPPED_TIMESTAMP = "shipped_timestamp";
  @SerializedName(SERIALIZED_NAME_SHIPPED_TIMESTAMP)
  private Long shippedTimestamp;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_LISTING_IMAGE_ID = "listing_image_id";
  @SerializedName(SERIALIZED_NAME_LISTING_IMAGE_ID)
  private Long listingImageId;

  public static final String SERIALIZED_NAME_RECEIPT_ID = "receipt_id";
  @SerializedName(SERIALIZED_NAME_RECEIPT_ID)
  private Long receiptId;

  public static final String SERIALIZED_NAME_IS_DIGITAL = "is_digital";
  @SerializedName(SERIALIZED_NAME_IS_DIGITAL)
  private Boolean isDigital;

  public static final String SERIALIZED_NAME_FILE_DATA = "file_data";
  @SerializedName(SERIALIZED_NAME_FILE_DATA)
  private String fileData;

  public static final String SERIALIZED_NAME_LISTING_ID = "listing_id";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private Long listingId;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transaction_type";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Long productId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ShopReceiptTransactionPrice price;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shipping_cost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private ShopReceiptTransactionShippingCost shippingCost;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<ShopReceiptTransactionVariationsInner> variations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_DATA = "product_data";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DATA)
  private List<ListingInventoryProductPropertyValuesInner> productData = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_PROFILE_ID = "shipping_profile_id";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PROFILE_ID)
  private Long shippingProfileId;

  public static final String SERIALIZED_NAME_MIN_PROCESSING_DAYS = "min_processing_days";
  @SerializedName(SERIALIZED_NAME_MIN_PROCESSING_DAYS)
  private Long minProcessingDays;

  public static final String SERIALIZED_NAME_MAX_PROCESSING_DAYS = "max_processing_days";
  @SerializedName(SERIALIZED_NAME_MAX_PROCESSING_DAYS)
  private Long maxProcessingDays;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shipping_method";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_SHIPPING_UPGRADE = "shipping_upgrade";
  @SerializedName(SERIALIZED_NAME_SHIPPING_UPGRADE)
  private String shippingUpgrade;

  public static final String SERIALIZED_NAME_EXPECTED_SHIP_DATE = "expected_ship_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_SHIP_DATE)
  private Long expectedShipDate;

  public static final String SERIALIZED_NAME_BUYER_COUPON = "buyer_coupon";
  @SerializedName(SERIALIZED_NAME_BUYER_COUPON)
  private Float buyerCoupon = 0f;

  public static final String SERIALIZED_NAME_SHOP_COUPON = "shop_coupon";
  @SerializedName(SERIALIZED_NAME_SHOP_COUPON)
  private Float shopCoupon = 0f;

  public ShopReceiptTransactionsInner() {
  }

  public ShopReceiptTransactionsInner transactionId(Long transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique numeric ID for a transaction.
   * minimum: 1
   * @return transactionId
  **/
  @javax.annotation.Nullable

  public Long getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(Long transactionId) {
    this.transactionId = transactionId;
  }


  public ShopReceiptTransactionsInner title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
   * @return title
  **/
  @javax.annotation.Nullable

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ShopReceiptTransactionsInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ShopReceiptTransactionsInner sellerUserId(Long sellerUserId) {
    
    this.sellerUserId = sellerUserId;
    return this;
  }

   /**
   * The numeric user ID for the seller in this transaction.
   * minimum: 1
   * @return sellerUserId
  **/
  @javax.annotation.Nullable

  public Long getSellerUserId() {
    return sellerUserId;
  }


  public void setSellerUserId(Long sellerUserId) {
    this.sellerUserId = sellerUserId;
  }


  public ShopReceiptTransactionsInner buyerUserId(Long buyerUserId) {
    
    this.buyerUserId = buyerUserId;
    return this;
  }

   /**
   * The numeric user ID for the buyer in this transaction.
   * minimum: 1
   * @return buyerUserId
  **/
  @javax.annotation.Nullable

  public Long getBuyerUserId() {
    return buyerUserId;
  }


  public void setBuyerUserId(Long buyerUserId) {
    this.buyerUserId = buyerUserId;
  }


  public ShopReceiptTransactionsInner createTimestamp(Long createTimestamp) {
    
    this.createTimestamp = createTimestamp;
    return this;
  }

   /**
   * The transaction\\&#39;s creation date and time, in epoch seconds.
   * minimum: 946684800
   * @return createTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreateTimestamp() {
    return createTimestamp;
  }


  public void setCreateTimestamp(Long createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public ShopReceiptTransactionsInner createdTimestamp(Long createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The transaction\\&#39;s creation date and time, in epoch seconds.
   * minimum: 946684800
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable

  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ShopReceiptTransactionsInner paidTimestamp(Long paidTimestamp) {
    
    this.paidTimestamp = paidTimestamp;
    return this;
  }

   /**
   * The transaction\\&#39;s paid date and time, in epoch seconds.
   * minimum: 946684800
   * @return paidTimestamp
  **/
  @javax.annotation.Nullable

  public Long getPaidTimestamp() {
    return paidTimestamp;
  }


  public void setPaidTimestamp(Long paidTimestamp) {
    this.paidTimestamp = paidTimestamp;
  }


  public ShopReceiptTransactionsInner shippedTimestamp(Long shippedTimestamp) {
    
    this.shippedTimestamp = shippedTimestamp;
    return this;
  }

   /**
   * The transaction\\&#39;s shipping date and time, in epoch seconds.
   * minimum: 946684800
   * @return shippedTimestamp
  **/
  @javax.annotation.Nullable

  public Long getShippedTimestamp() {
    return shippedTimestamp;
  }


  public void setShippedTimestamp(Long shippedTimestamp) {
    this.shippedTimestamp = shippedTimestamp;
  }


  public ShopReceiptTransactionsInner quantity(Long quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The numeric quantity of products purchased in this transaction.
   * minimum: 0
   * @return quantity
  **/
  @javax.annotation.Nullable

  public Long getQuantity() {
    return quantity;
  }


  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public ShopReceiptTransactionsInner listingImageId(Long listingImageId) {
    
    this.listingImageId = listingImageId;
    return this;
  }

   /**
   * The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
   * minimum: 1
   * @return listingImageId
  **/
  @javax.annotation.Nullable

  public Long getListingImageId() {
    return listingImageId;
  }


  public void setListingImageId(Long listingImageId) {
    this.listingImageId = listingImageId;
  }


  public ShopReceiptTransactionsInner receiptId(Long receiptId) {
    
    this.receiptId = receiptId;
    return this;
  }

   /**
   * The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
   * minimum: 1
   * @return receiptId
  **/
  @javax.annotation.Nullable

  public Long getReceiptId() {
    return receiptId;
  }


  public void setReceiptId(Long receiptId) {
    this.receiptId = receiptId;
  }


  public ShopReceiptTransactionsInner isDigital(Boolean isDigital) {
    
    this.isDigital = isDigital;
    return this;
  }

   /**
   * When true, the transaction recorded the purchase of a digital listing.
   * @return isDigital
  **/
  @javax.annotation.Nullable

  public Boolean getIsDigital() {
    return isDigital;
  }


  public void setIsDigital(Boolean isDigital) {
    this.isDigital = isDigital;
  }


  public ShopReceiptTransactionsInner fileData(String fileData) {
    
    this.fileData = fileData;
    return this;
  }

   /**
   * A string describing the files purchased in this transaction.
   * @return fileData
  **/
  @javax.annotation.Nullable

  public String getFileData() {
    return fileData;
  }


  public void setFileData(String fileData) {
    this.fileData = fileData;
  }


  public ShopReceiptTransactionsInner listingId(Long listingId) {
    
    this.listingId = listingId;
    return this;
  }

   /**
   * The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
   * minimum: 0
   * @return listingId
  **/
  @javax.annotation.Nullable

  public Long getListingId() {
    return listingId;
  }


  public void setListingId(Long listingId) {
    this.listingId = listingId;
  }


  public ShopReceiptTransactionsInner transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type string for the transaction, usually \&quot;listing\&quot;.
   * @return transactionType
  **/
  @javax.annotation.Nullable

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public ShopReceiptTransactionsInner productId(Long productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
   * minimum: 1
   * @return productId
  **/
  @javax.annotation.Nullable

  public Long getProductId() {
    return productId;
  }


  public void setProductId(Long productId) {
    this.productId = productId;
  }


  public ShopReceiptTransactionsInner sku(String sku) {
    
    this.sku = sku;
    return this;
  }

   /**
   * The SKU string for the product
   * @return sku
  **/
  @javax.annotation.Nullable

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    this.sku = sku;
  }


  public ShopReceiptTransactionsInner price(ShopReceiptTransactionPrice price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable

  public ShopReceiptTransactionPrice getPrice() {
    return price;
  }


  public void setPrice(ShopReceiptTransactionPrice price) {
    this.price = price;
  }


  public ShopReceiptTransactionsInner shippingCost(ShopReceiptTransactionShippingCost shippingCost) {
    
    this.shippingCost = shippingCost;
    return this;
  }

   /**
   * Get shippingCost
   * @return shippingCost
  **/
  @javax.annotation.Nullable

  public ShopReceiptTransactionShippingCost getShippingCost() {
    return shippingCost;
  }


  public void setShippingCost(ShopReceiptTransactionShippingCost shippingCost) {
    this.shippingCost = shippingCost;
  }


  public ShopReceiptTransactionsInner variations(List<ShopReceiptTransactionVariationsInner> variations) {
    
    this.variations = variations;
    return this;
  }

  public ShopReceiptTransactionsInner addVariationsItem(ShopReceiptTransactionVariationsInner variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * Array of variations and personalizations the buyer chose.
   * @return variations
  **/
  @javax.annotation.Nullable

  public List<ShopReceiptTransactionVariationsInner> getVariations() {
    return variations;
  }


  public void setVariations(List<ShopReceiptTransactionVariationsInner> variations) {
    this.variations = variations;
  }


  public ShopReceiptTransactionsInner productData(List<ListingInventoryProductPropertyValuesInner> productData) {
    
    this.productData = productData;
    return this;
  }

  public ShopReceiptTransactionsInner addProductDataItem(ListingInventoryProductPropertyValuesInner productDataItem) {
    if (this.productData == null) {
      this.productData = new ArrayList<>();
    }
    this.productData.add(productDataItem);
    return this;
  }

   /**
   * A list of property value entries for this product. Note: parenthesis characters (&#x60;(&#x60; and &#x60;)&#x60;) are not allowed.
   * @return productData
  **/
  @javax.annotation.Nullable

  public List<ListingInventoryProductPropertyValuesInner> getProductData() {
    return productData;
  }


  public void setProductData(List<ListingInventoryProductPropertyValuesInner> productData) {
    this.productData = productData;
  }


  public ShopReceiptTransactionsInner shippingProfileId(Long shippingProfileId) {
    
    this.shippingProfileId = shippingProfileId;
    return this;
  }

   /**
   * The ID of the shipping profile selected for this listing.
   * minimum: 1
   * @return shippingProfileId
  **/
  @javax.annotation.Nullable

  public Long getShippingProfileId() {
    return shippingProfileId;
  }


  public void setShippingProfileId(Long shippingProfileId) {
    this.shippingProfileId = shippingProfileId;
  }


  public ShopReceiptTransactionsInner minProcessingDays(Long minProcessingDays) {
    
    this.minProcessingDays = minProcessingDays;
    return this;
  }

   /**
   * The minimum number of days for processing the listing.
   * minimum: 1
   * @return minProcessingDays
  **/
  @javax.annotation.Nullable

  public Long getMinProcessingDays() {
    return minProcessingDays;
  }


  public void setMinProcessingDays(Long minProcessingDays) {
    this.minProcessingDays = minProcessingDays;
  }


  public ShopReceiptTransactionsInner maxProcessingDays(Long maxProcessingDays) {
    
    this.maxProcessingDays = maxProcessingDays;
    return this;
  }

   /**
   * The maximum number of days for processing the listing.
   * minimum: 1
   * @return maxProcessingDays
  **/
  @javax.annotation.Nullable

  public Long getMaxProcessingDays() {
    return maxProcessingDays;
  }


  public void setMaxProcessingDays(Long maxProcessingDays) {
    this.maxProcessingDays = maxProcessingDays;
  }


  public ShopReceiptTransactionsInner shippingMethod(String shippingMethod) {
    
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Name of the selected shipping method.
   * @return shippingMethod
  **/
  @javax.annotation.Nullable

  public String getShippingMethod() {
    return shippingMethod;
  }


  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public ShopReceiptTransactionsInner shippingUpgrade(String shippingUpgrade) {
    
    this.shippingUpgrade = shippingUpgrade;
    return this;
  }

   /**
   * The name of the shipping upgrade selected for this listing. Default value is null.
   * @return shippingUpgrade
  **/
  @javax.annotation.Nullable

  public String getShippingUpgrade() {
    return shippingUpgrade;
  }


  public void setShippingUpgrade(String shippingUpgrade) {
    this.shippingUpgrade = shippingUpgrade;
  }


  public ShopReceiptTransactionsInner expectedShipDate(Long expectedShipDate) {
    
    this.expectedShipDate = expectedShipDate;
    return this;
  }

   /**
   * The date &amp; time of the expected ship date, in epoch seconds.
   * minimum: 946684800
   * @return expectedShipDate
  **/
  @javax.annotation.Nullable

  public Long getExpectedShipDate() {
    return expectedShipDate;
  }


  public void setExpectedShipDate(Long expectedShipDate) {
    this.expectedShipDate = expectedShipDate;
  }


  public ShopReceiptTransactionsInner buyerCoupon(Float buyerCoupon) {
    
    this.buyerCoupon = buyerCoupon;
    return this;
  }

   /**
   * The amount of the buyer coupon that was discounted in the shop&#39;s currency.
   * @return buyerCoupon
  **/
  @javax.annotation.Nullable

  public Float getBuyerCoupon() {
    return buyerCoupon;
  }


  public void setBuyerCoupon(Float buyerCoupon) {
    this.buyerCoupon = buyerCoupon;
  }


  public ShopReceiptTransactionsInner shopCoupon(Float shopCoupon) {
    
    this.shopCoupon = shopCoupon;
    return this;
  }

   /**
   * The amount of the shop coupon that was discounted in the shop&#39;s currency.
   * @return shopCoupon
  **/
  @javax.annotation.Nullable

  public Float getShopCoupon() {
    return shopCoupon;
  }


  public void setShopCoupon(Float shopCoupon) {
    this.shopCoupon = shopCoupon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopReceiptTransactionsInner shopReceiptTransactionsInner = (ShopReceiptTransactionsInner) o;
    return Objects.equals(this.transactionId, shopReceiptTransactionsInner.transactionId) &&
        Objects.equals(this.title, shopReceiptTransactionsInner.title) &&
        Objects.equals(this.description, shopReceiptTransactionsInner.description) &&
        Objects.equals(this.sellerUserId, shopReceiptTransactionsInner.sellerUserId) &&
        Objects.equals(this.buyerUserId, shopReceiptTransactionsInner.buyerUserId) &&
        Objects.equals(this.createTimestamp, shopReceiptTransactionsInner.createTimestamp) &&
        Objects.equals(this.createdTimestamp, shopReceiptTransactionsInner.createdTimestamp) &&
        Objects.equals(this.paidTimestamp, shopReceiptTransactionsInner.paidTimestamp) &&
        Objects.equals(this.shippedTimestamp, shopReceiptTransactionsInner.shippedTimestamp) &&
        Objects.equals(this.quantity, shopReceiptTransactionsInner.quantity) &&
        Objects.equals(this.listingImageId, shopReceiptTransactionsInner.listingImageId) &&
        Objects.equals(this.receiptId, shopReceiptTransactionsInner.receiptId) &&
        Objects.equals(this.isDigital, shopReceiptTransactionsInner.isDigital) &&
        Objects.equals(this.fileData, shopReceiptTransactionsInner.fileData) &&
        Objects.equals(this.listingId, shopReceiptTransactionsInner.listingId) &&
        Objects.equals(this.transactionType, shopReceiptTransactionsInner.transactionType) &&
        Objects.equals(this.productId, shopReceiptTransactionsInner.productId) &&
        Objects.equals(this.sku, shopReceiptTransactionsInner.sku) &&
        Objects.equals(this.price, shopReceiptTransactionsInner.price) &&
        Objects.equals(this.shippingCost, shopReceiptTransactionsInner.shippingCost) &&
        Objects.equals(this.variations, shopReceiptTransactionsInner.variations) &&
        Objects.equals(this.productData, shopReceiptTransactionsInner.productData) &&
        Objects.equals(this.shippingProfileId, shopReceiptTransactionsInner.shippingProfileId) &&
        Objects.equals(this.minProcessingDays, shopReceiptTransactionsInner.minProcessingDays) &&
        Objects.equals(this.maxProcessingDays, shopReceiptTransactionsInner.maxProcessingDays) &&
        Objects.equals(this.shippingMethod, shopReceiptTransactionsInner.shippingMethod) &&
        Objects.equals(this.shippingUpgrade, shopReceiptTransactionsInner.shippingUpgrade) &&
        Objects.equals(this.expectedShipDate, shopReceiptTransactionsInner.expectedShipDate) &&
        Objects.equals(this.buyerCoupon, shopReceiptTransactionsInner.buyerCoupon) &&
        Objects.equals(this.shopCoupon, shopReceiptTransactionsInner.shopCoupon);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, title, description, sellerUserId, buyerUserId, createTimestamp, createdTimestamp, paidTimestamp, shippedTimestamp, quantity, listingImageId, receiptId, isDigital, fileData, listingId, transactionType, productId, sku, price, shippingCost, variations, productData, shippingProfileId, minProcessingDays, maxProcessingDays, shippingMethod, shippingUpgrade, expectedShipDate, buyerCoupon, shopCoupon);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopReceiptTransactionsInner {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sellerUserId: ").append(toIndentedString(sellerUserId)).append("\n");
    sb.append("    buyerUserId: ").append(toIndentedString(buyerUserId)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    paidTimestamp: ").append(toIndentedString(paidTimestamp)).append("\n");
    sb.append("    shippedTimestamp: ").append(toIndentedString(shippedTimestamp)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    listingImageId: ").append(toIndentedString(listingImageId)).append("\n");
    sb.append("    receiptId: ").append(toIndentedString(receiptId)).append("\n");
    sb.append("    isDigital: ").append(toIndentedString(isDigital)).append("\n");
    sb.append("    fileData: ").append(toIndentedString(fileData)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("    productData: ").append(toIndentedString(productData)).append("\n");
    sb.append("    shippingProfileId: ").append(toIndentedString(shippingProfileId)).append("\n");
    sb.append("    minProcessingDays: ").append(toIndentedString(minProcessingDays)).append("\n");
    sb.append("    maxProcessingDays: ").append(toIndentedString(maxProcessingDays)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    shippingUpgrade: ").append(toIndentedString(shippingUpgrade)).append("\n");
    sb.append("    expectedShipDate: ").append(toIndentedString(expectedShipDate)).append("\n");
    sb.append("    buyerCoupon: ").append(toIndentedString(buyerCoupon)).append("\n");
    sb.append("    shopCoupon: ").append(toIndentedString(shopCoupon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_id");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("seller_user_id");
    openapiFields.add("buyer_user_id");
    openapiFields.add("create_timestamp");
    openapiFields.add("created_timestamp");
    openapiFields.add("paid_timestamp");
    openapiFields.add("shipped_timestamp");
    openapiFields.add("quantity");
    openapiFields.add("listing_image_id");
    openapiFields.add("receipt_id");
    openapiFields.add("is_digital");
    openapiFields.add("file_data");
    openapiFields.add("listing_id");
    openapiFields.add("transaction_type");
    openapiFields.add("product_id");
    openapiFields.add("sku");
    openapiFields.add("price");
    openapiFields.add("shipping_cost");
    openapiFields.add("variations");
    openapiFields.add("product_data");
    openapiFields.add("shipping_profile_id");
    openapiFields.add("min_processing_days");
    openapiFields.add("max_processing_days");
    openapiFields.add("shipping_method");
    openapiFields.add("shipping_upgrade");
    openapiFields.add("expected_ship_date");
    openapiFields.add("buyer_coupon");
    openapiFields.add("shop_coupon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShopReceiptTransactionsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShopReceiptTransactionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShopReceiptTransactionsInner is not found in the empty JSON string", ShopReceiptTransactionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShopReceiptTransactionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShopReceiptTransactionsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("file_data") != null && !jsonObj.get("file_data").isJsonNull()) && !jsonObj.get("file_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_data").toString()));
      }
      if ((jsonObj.get("transaction_type") != null && !jsonObj.get("transaction_type").isJsonNull()) && !jsonObj.get("transaction_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_type").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ShopReceiptTransactionPrice.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      // validate the optional field `shipping_cost`
      if (jsonObj.get("shipping_cost") != null && !jsonObj.get("shipping_cost").isJsonNull()) {
        ShopReceiptTransactionShippingCost.validateJsonObject(jsonObj.getAsJsonObject("shipping_cost"));
      }
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonNull()) {
        JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
        if (jsonArrayvariations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
          }

          // validate the optional field `variations` (array)
          for (int i = 0; i < jsonArrayvariations.size(); i++) {
            ShopReceiptTransactionVariationsInner.validateJsonObject(jsonArrayvariations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("product_data") != null && !jsonObj.get("product_data").isJsonNull()) {
        JsonArray jsonArrayproductData = jsonObj.getAsJsonArray("product_data");
        if (jsonArrayproductData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_data` to be an array in the JSON string but got `%s`", jsonObj.get("product_data").toString()));
          }

          // validate the optional field `product_data` (array)
          for (int i = 0; i < jsonArrayproductData.size(); i++) {
            ListingInventoryProductPropertyValuesInner.validateJsonObject(jsonArrayproductData.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("shipping_method") != null && !jsonObj.get("shipping_method").isJsonNull()) && !jsonObj.get("shipping_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_method").toString()));
      }
      if ((jsonObj.get("shipping_upgrade") != null && !jsonObj.get("shipping_upgrade").isJsonNull()) && !jsonObj.get("shipping_upgrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_upgrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_upgrade").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShopReceiptTransactionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShopReceiptTransactionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShopReceiptTransactionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShopReceiptTransactionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ShopReceiptTransactionsInner>() {
           @Override
           public void write(JsonWriter out, ShopReceiptTransactionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShopReceiptTransactionsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShopReceiptTransactionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShopReceiptTransactionsInner
  * @throws IOException if the JSON string is invalid with respect to ShopReceiptTransactionsInner
  */
  public static ShopReceiptTransactionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShopReceiptTransactionsInner.class);
  }

 /**
  * Convert an instance of ShopReceiptTransactionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

